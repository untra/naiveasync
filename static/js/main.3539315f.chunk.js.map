{"version":3,"sources":["naiveasync/actions.ts","naiveasync/keyedcache.tsx","naiveasync/observables.ts","naiveasync/reducer.ts","naiveasync/controllable.tsx","naiveasync/utils.ts","naiveasync/naiveasync.tsx","utils/store.tsx","routes/home.tsx","utils/promise.tsx","routes/components/debounceTest.tsx","routes/components/memoized.tsx","routes/components/metadataTest.tsx","routes/components/onData.tsx","routes/components/onError.tsx","routes/components/RandomNumberSelectableSync.tsx","routes/components/RandomNumberSync.tsx","routes/components/throttleTest.tsx","routes/components/assignTest.tsx","routes/components/retryTest.tsx","routes/components/subscribeTest.tsx","routes/components/timeout.tsx","routes/tests.tsx","index.tsx","routes/index.tsx"],"names":["isAsyncAction","action","asyncActionMatcher","operation","phase","asyncActionMatchesPhase","name","asyncActionMatchesOperation","isAsyncState","state","naiveAsyncInitialState","Object","freeze","status","error","params","data","naiveAsyncInitialMeta","timeout","NaN","record","dataCount","errorCount","lastCalled","memo","undefined","onData","onError","errRetryCb","lastParams","debounce","throttle","retries","subscribe","subscribeInterval","KeyedCache","cache","this","index","keys","length","$from","observableInput","maybeStoreLike","getState","dispatch","store","state$","BehaviorSubject","next","bind","$fromStore","obj","Symbol","asyncIterator","asyncIterable","Observable","subscriber","a","closed","complete","rxFrom","asyncStateReducer","firstReducer","reducers","reduce","accumulatedState","nextReducer","chain","payload","isError","Error","message","JSON","stringify","metaCache","naiveAsyncInitialSlice","naiveAsyncReducer","currentState","nextState","remove","matchCallOrSyncOrDestroy","asyncLifeCycle","call","destroy","sync","matchCall","match","matchDestroy","matchSync","actionPayload","observableFromAsyncLifeCycle","action$","meta","id","done","subscription","isNaN","timeoutRejectPromise","Promise","_","reject","setTimeout","race","operationWithMeta","nextData","err","pipe","filter","first","unsubscribe","console","warn","AsyncableEpicOnPhase","reuseParams","phaseMatcher","mergeMap","get","now","Date","actionAsyncLifecycle","type","memoized","value","resolve","resolveObservableAs","set","responseDispatchOnPhase","awaitResolve","awaitReject","clearInterval","setInterval","naiveAsyncMiddleware","Subject","middleware","result","$toMiddleware","selectFunction","substate","retryOperation","catch","asyncLifecycle","existing","factory","postmark","guard","lifecycle","selector","reset","assign","enabled","thisMeta","lodashThrottle","updatedLifecycle","lodashDebounce","leading","trailing","awaitedPromise","createControllableContext","reducer","props","useStore","dp","useDispatch","useState","setState","internalDispatch","dispatchedAction","children","mockDoneAsyncState","NaiveAsyncManaged","useEffect","AsyncManaged","noop","NaiveAsync","autoParams","AsyncControllable","reduxState","invoke","Async","initialState","intervalTickle","setIntervalTickle","initState","Controllable","asyncState","assignState","val","Math","random","middlewares","enhancers","windoww","window","devToolsExtension","__REDUX_DEVTOOLS_EXTENSION__","push","getEnhancers","composedEnhancers","compose","applyMiddleware","createConnectedStore","createStore","version","packageJSON","exampleInit","exampleInflight","user","password","pickedExample","floor","asyncOperation","r","time","foo","asyncableView","onClick","Home","className","role","aria-label","href","to","alt","src","React","Component","mockResolve","maxTime","timeMS","mockReject","slowResolve","slowReject","debounceLifecycle","log","icon","connect","select","display","memoizedLifecycle","iconToName","setMemoized","metadataLifecycle","ondataLifecycle","onDataType","setOnDataType","assignOnData","simple","cb","dispatched","onErrorLifecycle","onErrorType","setonErrorType","assignonError","randomNumberLifecycle","multiplier","generate","setMultiplier","assignMultiplier","num","throttleLifecycle","assignTestLifecycle","retryTestLifecycle","rand","debug","style","backgroundColor","subscriptionTestLifecycle","timeoutLifecycle","setTheTimeout","min","onChange","e","element","currentTarget","parseInt","emojiView","callableView","autoParamsOp","autoResolve","namedFunction","unreliableAsyncOperation","lifeCycleInput","asyncInputLifecycle","subscribeLifecycle","Test","packagejson","RandomNumberSelectableSync","ReactDOM","render","basename","path","component","test","exact","home","document","getElementById"],"mappings":"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","file":"static/js/main.3539315f.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Dispatch } from \"redux\";\nimport { KeyedCache } from \"./keyedcache\";\n\n/** 🔁  */\nexport const naiveAsyncEmoji = \"🔁\";\n\n/** 🔁  */\nexport const asyncableEmoji = \"🔁\";\n\n/** the phase state of the naiveAsync lifecycle */\nexport type AsyncPhase =\n  | \"call\"\n  | \"data\"\n  | \"error\"\n  | \"done\"\n  | \"destroy\"\n  | \"reset\"\n  | \"sync\"\n  | \"assign\"\n  | \"subscribe\";\n\ninterface AsyncPostmark {\n  name: string;\n  phase: AsyncPhase;\n}\n\n/** a function that takes a singular params object P, returning a Promise<D> */\nexport type NaiveAsyncFunction<Data, Params> = (\n  params: Params\n) => Promise<Data>;\n\n/** a function that takes a singular params object P, returning a Promise<D> */\nexport type AsyncFunction<Params, Data> = (params: Params) => Promise<Data>;\n\n/**\n * A typical redux action, templating a payload\n * @export\n * @interface Action\n * @template Payload\n */\nexport interface Action<Payload> {\n  type: string;\n  payload: Payload;\n}\n\n/**\n * A type interchangeable with a typical redux action\n * @export\n * @interface AnyAction\n */\nexport interface AnyAction {\n  type: string;\n  payload?: any;\n}\n\n/**\n * AsyncAction<Payload> is an action tracking an asychronous process (one we manage)\n * @export\n * @interface AsyncAction\n * @extends {Action<Payload>}\n * @template Payload\n */\nexport interface AsyncAction<Payload> extends Action<Payload> {\n  readonly type: string;\n  readonly payload: Payload;\n  readonly [naiveAsyncEmoji]: AsyncPostmark;\n}\n\n/**\n * isAsyncAction typeGuards AsyncAction<any>\n * @param {AnyAction} action\n * @returns {action is AsyncAction<any>}\n */\nexport const isAsyncAction = (action: AnyAction): action is AsyncAction<any> =>\n  naiveAsyncEmoji in action;\n\nconst asyncActionMatchesPhase = (\n  action: AsyncAction<any>,\n  phase?: AsyncPhase\n): boolean => !!(!phase || action[naiveAsyncEmoji].phase === phase);\n\nconst asyncActionMatchesOperation = (\n  action: AsyncAction<any>,\n  operation?: NaiveAsyncFunction<any, any>\n): boolean =>\n  !operation ||\n  !!(operation.name && operation.name === action[naiveAsyncEmoji].name);\n\n/**\n * an action matcher typeguard for a given operation and phase\n * @export\n * @template Data\n * @template Params\n * @param {(NaiveAsyncFunction<Data, Params> | undefined)} operation\n * @param {AsyncPhase | undefined} phase\n * @returns {(action: AnyAction) => action is AsyncAction<any>}\n */\nexport function asyncActionMatcher<Data extends any, Params extends {}>(\n  operation: NaiveAsyncFunction<Data, Params> | undefined,\n  phase: \"call\"\n): (action: AnyAction) => action is AsyncAction<Params>;\n\nexport function asyncActionMatcher<Data, Params extends {}>(\n  operation: NaiveAsyncFunction<Data, Params> | undefined,\n  phase: \"sync\"\n): (action: AnyAction) => action is AsyncAction<Params>;\n\nexport function asyncActionMatcher<Data, Params extends {}>(\n  operation: NaiveAsyncFunction<Data, Params> | undefined,\n  phase: \"data\"\n): (action: AnyAction) => action is AsyncAction<Data>;\n\nexport function asyncActionMatcher<Data, Params extends {}>(\n  operation: NaiveAsyncFunction<Data, Params> | undefined,\n  phase: \"error\"\n): (action: AnyAction) => action is AsyncAction<string>;\nexport function asyncActionMatcher<Data, Params extends {}>(\n  operation: NaiveAsyncFunction<Data, Params> | undefined,\n  phase: \"reset\"\n): (action: AnyAction) => action is AsyncAction<{}>;\nexport function asyncActionMatcher<Data, Params>(\n  operation?: NaiveAsyncFunction<Data, Params>,\n  phase?: AsyncPhase\n): (action: AnyAction) => action is AsyncAction<Params>;\nexport function asyncActionMatcher<Data, Params>(\n  operation?: NaiveAsyncFunction<Data, Params>,\n  phase?: AsyncPhase\n) {\n  return (action: AnyAction) =>\n    isAsyncAction(action) &&\n    asyncActionMatchesPhase(action, phase) &&\n    asyncActionMatchesOperation(action, operation);\n}\n\nexport type AsyncActionCreator<Payload> = (payload?: Payload) => {\n  /** Full type constant for actions created by this function, `eagle/myFunction/call`. */\n  readonly type: string;\n  /** Metadata for the owning this. */\n  readonly postmark: AsyncPostmark;\n  /**\n   * Function that returns true iff the given action matches all properties of this action creator's meta.\n   * In practice, this can be used to detect actions dispatched for this specific operation and lifecycle event.\n   */\n  readonly match: (action: Action<any>) => action is AsyncAction<Payload>;\n};\n\nexport const asyncActionCreatorFactory =\n  (name: string) =>\n  <Payload>(phase: AsyncPhase): AsyncActionCreator<Payload> => {\n    const type = `${naiveAsyncEmoji}/${name}/${phase}`;\n    const postmark = { name, phase };\n    const guard = asyncActionMatcher(undefined, phase);\n    const match = (action: Action<Payload>): action is AsyncAction<Payload> =>\n      guard(action) && action[naiveAsyncEmoji].name === name;\n    const actionCreator: AsyncActionCreator<Payload> = (payload?: Payload) => ({\n      type,\n      postmark,\n      match,\n      payload,\n      [naiveAsyncEmoji]: postmark,\n    });\n    return actionCreator;\n  };\n\n/**\n * Any redux store that implements usage of AsyncableState keyed to the AsyncableSymbol, use to typeguard implementations\n * @export\n * @interface AsyncableSlice\n * @deprecated favor AsyncableSlice instead\n */\nexport interface NaiveAsyncSlice {\n  [naiveAsyncEmoji]: { [key: string]: AsyncState<any, any> };\n}\n\n/**\n * Any redux store that implements usage of AsyncableState keyed to the AsyncableSymbol, use to typeguard implementations\n * @export\n * @interface AsyncableSlice\n */\nexport type AsyncableSlice = NaiveAsyncSlice;\n\nexport interface Gettable {\n  get: (a: any) => any;\n}\n\nexport const isGettable = (x: any): x is Gettable =>\n  \"get\" in x && typeof x.get === \"function\";\n\nexport type AsyncableStateStatus = \"\" | \"inflight\" | \"error\" | \"done\";\n\n/** the initial state of a naiveasync operation */\nexport interface InitialAsyncState {\n  status: \"\";\n  error: \"\";\n  params: {};\n  data: null;\n}\n\n/** the inflight state of a naiveasync operation */\ninterface InflightAsyncState<Data, Params> {\n  status: \"inflight\";\n  error: \"\" | string;\n  params: {} | Params;\n  data: null | Data;\n}\n\n/** the error state of a naiveasync operation */\ninterface ErrorAsyncState<Data, Params> {\n  status: \"error\";\n  error: \"\" | string;\n  params: {} | Params;\n  data: null | Data;\n}\n\n/** the done state of a naiveasync operation */\ninterface DoneAsyncState<Data, Params> {\n  status: \"done\";\n  error: \"\";\n  params: {} | Params;\n  data: Data;\n}\n\n/**\n * The state of a NaiveAsyncFunction, encompassing status, params, error, data\n */\nexport type AsyncState<Data, Params> =\n  | InitialAsyncState\n  | InflightAsyncState<Data, Params>\n  | ErrorAsyncState<Data, Params>\n  | DoneAsyncState<Data, Params>;\n\n/**\n * The state of a NaiveAsyncFunction, encompassing status, params, error, data\n * @deprecated favor AsyncState instead\n */\nexport type NaiveAsyncState<Data, Params> = AsyncState<Data, Params>;\n\n/**\n * isAsyncState typeGuards AsyncState<any>\n * @param {Object} state\n * @returns {state is AsyncState<any,any>}\n */\nexport const isAsyncState = <D, P>(state: {}): state is AsyncState<D, P> =>\n  state !== null &&\n  \"status\" in state &&\n  \"error\" in state &&\n  \"data\" in state &&\n  \"params\" in state;\n\n/** the initial state of a naiveasync operation */\nexport const naiveAsyncInitialState = Object.freeze({\n  status: \"\",\n  error: \"\",\n  params: {},\n  data: null,\n}) as InitialAsyncState;\n\ntype OnCb = () => void;\ntype OnData1<Data> = (data: Data) => void;\ntype OnData2<Data> = (data: Data, dispatch: Dispatch<AnyAction>) => void;\ntype OnError1 = (error: string) => void;\ntype OnError2 = (error: string, dispatch: Dispatch<AnyAction>) => void;\ntype ErrRetry1 = (error: any) => void;\ntype ErrRetry2 = (error: any, retry: number) => void;\nexport type OnError = OnCb | OnError1 | OnError2;\nexport type OnData<Data> = OnCb | OnData1<Data> | OnData2<Data>;\nexport type ErrRetryCb = OnCb | ErrRetry1 | ErrRetry2;\n\n/**\n * Meta information representative of a lifecycle, useful for testing.\n *\n * Async lifecycles manage a number of aspects of the operation and is configured execution.\n * Some of these aspects are recorded in the meta cache, which are not associated with the redux store but used internally to control naiveasync operations.\n * This selection is contextual from the instance when .meta() is called on the lifecycle.\n * @export\n * @interface AsyncMeta\n * @template Data\n * @template Params\n */\nexport interface AsyncMeta<Data, Params> {\n  /** 'debounce' assignment */\n  readonly debounce: number;\n  /** 'throttle' assignment */\n  readonly throttle: number;\n  /** 'retries' assignment */\n  readonly retries: number;\n  /** 'subscribe' assignment (experimental) */\n  readonly subscribe: number;\n  /** 'subscribe' assignment (experimental) */\n  readonly subscribeInterval: any;\n  /** 'timeout' assignment. starts at NaN if not yet assigned. */\n  readonly timeout: number;\n  /** time in ms the operation took to run. starts as NaN if not yet called. */\n  readonly record: number;\n  /** timestamp when the operation was last run */\n  readonly lastCalled: number;\n  /** number of times data was returned */\n  readonly dataCount: number;\n  /** number of times error was returned */\n  readonly errorCount: number;\n  /** the memoize cache, if its enabled */\n  readonly memo?: KeyedCache<Data>;\n  /** the last params used to call this operation */\n  readonly lastParams?: Params;\n  /** 'onData' callback assignment */\n  readonly onData?: OnData<Data>;\n  /** 'onError' callback assignment */\n  readonly onError?: OnError;\n  /** retries 'errRetryCb' callback assignment */\n  readonly errRetryCb?: ErrRetryCb;\n  /** awaiting resolve callback, if the lifecycle is being awaited on */\n  readonly awaitResolve?: (value: Data) => void;\n  /** awaiting reject callback, if the lifecycle is being awaited on */\n  readonly awaitReject?: (reason?: string) => void;\n}\n\nexport const naiveAsyncInitialMeta = Object.freeze({\n  timeout: NaN,\n  record: NaN,\n  dataCount: 0,\n  errorCount: 0,\n  lastCalled: 0,\n  memo: undefined,\n  onData: () => \"noop\",\n  onError: () => \"noop\",\n  errRetryCb: () => \"noop\",\n  lastParams: undefined,\n  debounce: 0,\n  throttle: 0,\n  retries: 0,\n  subscribe: 0,\n  subscribeInterval: undefined,\n}) as AsyncMeta<any, any>;\n","interface Cache<T> {\n  [index: string]: T | undefined;\n}\n\nexport class KeyedCache<T> {\n  private cache: Cache<T>;\n  public constructor() {\n    this.cache = {};\n  }\n  public get(index: string): T | undefined {\n    return this.cache[index];\n  }\n  public set(index: string, data: T): void {\n    this.cache[index] = data;\n  }\n  public remove(index: string): void {\n    delete this.cache[index];\n  }\n  public size(): number {\n    return this.keys().length;\n  }\n  public keys(): string[] {\n    return Object.keys(this.cache);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Action, Middleware, Store } from \"redux\";\nimport {\n  BehaviorSubject,\n  from as rxFrom,\n  Observable,\n  ObservableInput,\n  Subject,\n} from \"rxjs\";\nimport { AnyAction } from \"./actions\";\n\n/**\n * SubjectLike interface type containing method signatures critical to behavior of an observable subject\n * @interface SubjectLike\n * @template S\n * @template A\n */\ninterface SubjectLike<S, A = S> {\n  subscribe: Subject<S>[\"subscribe\"];\n  next: Subject<A>[\"next\"];\n}\n\n/**\n * StoreLike interface type containing method signatures critical to behavior of a redux store\n * @interface StoreLike\n * @template S\n * @template A\n */\ninterface StoreLike<S, A extends Action = AnyAction> {\n  subscribe: Store<S, A>[\"subscribe\"];\n  getState: Store<S, A>[\"getState\"];\n  dispatch: Store<S, A>[\"dispatch\"];\n}\n\n// const isPromise = <Data>(obj: Promise<Data> | any): obj is Promise<Data> =>\n// obj instanceof Promise\n\n// /** Internal. Converts an `Promise` to an `Observable` by piping its yield into the subscriber until the `Promise` is exhausted. */\n// const $fromPromise = <Data>(asyncPromise: Promise<Data>): Observable<Data> =>\n// new Observable<Data>(\n//   subscriber =>\n//     void (async () => {\n//       const f = Observable.fr\n//       console.log('this is the void promise!!!!')\n//       try {\n//         await asyncPromise\n//         .then((data) => subscriber.next(data))\n//         .catch((err) => subscriber.error(err))\n//         .finally(() => {\n//           if (subscriber.closed) {\n//             return\n//           }\n//           subscriber.complete()\n//         })\n//       } catch (e) {\n//         console.warn('wacky error', e)\n//         subscriber.error(e)\n//       }\n//     })(),\n// )\n\nconst isAsyncIterable = <Data>(\n  obj: AsyncIterable<Data> | any\n): obj is AsyncIterable<Data> =>\n  Symbol.asyncIterator in obj &&\n  typeof obj[Symbol.asyncIterator] === \"function\";\n\n/** Internal. Converts an `AsyncIterable` to an `Observable` by piping its yield into the subscriber until the `AsyncIterable` is exhausted. */\nconst $fromAsyncIterable = <Data>(\n  asyncIterable: AsyncIterable<Data>\n): Observable<Data> =>\n  new Observable<Data>(\n    (subscriber) =>\n      void (async () => {\n        try {\n          for await (const data of asyncIterable) {\n            if (subscriber.closed) {\n              return;\n            }\n            subscriber.next(data);\n          }\n          subscriber.complete();\n        } catch (e) {\n          subscriber.error(e);\n        }\n      })()\n  );\n\n/** Type guard that indicates whether an object has the crucial methods to behave like a Redux Store. */\nexport const isStoreLike = (\n  maybeStoreLike: StoreLike<any, any> | any\n): maybeStoreLike is StoreLike<any, any> =>\n  !!maybeStoreLike &&\n  \"subscribe\" in maybeStoreLike &&\n  typeof maybeStoreLike.subscribe === \"function\" &&\n  \"getState\" in maybeStoreLike &&\n  typeof maybeStoreLike.getState === \"function\" &&\n  \"dispatch\" in maybeStoreLike &&\n  typeof maybeStoreLike.dispatch === \"function\";\n\n/** Function that converts `Store<S, A>` -> `SubjectLike<S, A>`. */\nconst $fromStore = <S, A extends Action>(\n  store: StoreLike<S, A>\n): SubjectLike<S, A> => {\n  const state$ = new BehaviorSubject<S>(store.getState());\n  store.subscribe(() => {\n    state$.next(store.getState());\n  });\n  return {\n    subscribe: state$.subscribe.bind(state$) as any,\n    next: (action: A) => {\n      store.dispatch(action);\n    },\n  };\n};\n/**\n * $from creates a redux observable from an observableinput type (a promise or other subscribable)\n * @template Item\n * @param {ObservableInput<Item>} observableInput\n * @returns\n */\nexport const $from = <Item>(observableInput: ObservableInput<Item>) =>\n  isStoreLike(observableInput)\n    ? $fromStore(observableInput)\n    : isAsyncIterable(observableInput)\n    ? $fromAsyncIterable(observableInput)\n    : // isPromise(observableInput) ? $fromPromise(observableInput) :\n      rxFrom(observableInput);\n\n/**\n * $toMiddleware creates a Redux Middleware that pipes all dispatched actions through the given Subject.\n * provides an indirect means to create an Observable<Action> from a Redux store.\n * Subscribers to the Subject are notified after the reducers are called, so can perform side-effects without delaying state updates.\n * This middleware can be used as a lightweight alternative to redux-observable\n * @param {Subject<Action>} action$\n * @returns {Middleware}\n */\nexport const $toMiddleware =\n  (action$: Subject<Action>): Middleware =>\n  () =>\n  (next) =>\n  (action) => {\n    const result = next(action);\n    action$.next(action);\n    return result;\n  };\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Reducer } from \"redux\";\nimport {\n  AnyAction,\n  isAsyncAction,\n  isAsyncState,\n  naiveAsyncEmoji,\n  naiveAsyncInitialState,\n  AsyncState,\n} from \"./actions\";\n\nconst callReducer: Reducer<AsyncState<any, any>, AnyAction> = (\n  state: AsyncState<any, any> = naiveAsyncInitialState,\n  action: AnyAction\n) =>\n  isAsyncAction(action) && action[naiveAsyncEmoji].phase === \"call\"\n    ? {\n        ...state,\n        status: \"inflight\",\n        params: action.payload,\n        data: null,\n        error: \"\",\n      }\n    : state;\n\nconst syncReducer: Reducer<AsyncState<any, any>, AnyAction> = (\n  state: AsyncState<any, any> = naiveAsyncInitialState,\n  action: AnyAction\n) => {\n  if (isAsyncAction(action) && action[naiveAsyncEmoji].phase === \"sync\") {\n    const params = action.payload === undefined ? state.params : action.payload;\n    return {\n      ...state,\n      status: \"inflight\",\n      params,\n    };\n  }\n  return state;\n};\n\nconst dataReducer: Reducer<AsyncState<any, any>, AnyAction> = (\n  state: AsyncState<any, any> = naiveAsyncInitialState,\n  action: AnyAction\n) =>\n  isAsyncAction(action) && action[naiveAsyncEmoji].phase === \"data\"\n    ? {\n        ...state,\n        data: action.payload,\n        error: \"\",\n      }\n    : state;\n\nconst errorReducer: Reducer<AsyncState<any, any>, AnyAction> = (\n  state: AsyncState<any, any> = naiveAsyncInitialState,\n  action: AnyAction\n) => {\n  if (isAsyncAction(action) && action[naiveAsyncEmoji].phase === \"error\") {\n    const isError = (a: Error | any): a is Error => a instanceof Error;\n    const error: string = isError(action.payload)\n      ? action.payload.message\n      : typeof action.payload === \"object\"\n      ? JSON.stringify(action.payload)\n      : action.payload;\n    return {\n      ...state,\n      status: \"error\",\n      error,\n    };\n  }\n  return state;\n};\n\nconst doneReducer: Reducer<AsyncState<any, any>, AnyAction> = (\n  state: AsyncState<any, any> = naiveAsyncInitialState,\n  action: AnyAction\n) =>\n  isAsyncAction(action) && action[naiveAsyncEmoji].phase === \"done\"\n    ? {\n        ...state,\n        status: \"done\",\n        error: \"\",\n      }\n    : state;\n\nconst resetReducer: Reducer<AsyncState<any, any>, AnyAction> = (\n  state: AsyncState<any, any> = naiveAsyncInitialState,\n  action: AnyAction\n) =>\n  isAsyncAction(action) && action[naiveAsyncEmoji].phase === \"reset\"\n    ? naiveAsyncInitialState\n    : state;\n\nexport const chain =\n  <S>(firstReducer: Reducer<S>, ...reducers: Array<Reducer<S>>): Reducer<S> =>\n  (state: any, action: any) =>\n    reducers.reduce(\n      (accumulatedState, nextReducer) => nextReducer(accumulatedState, action),\n      firstReducer(state, action)\n    );\n\nconst assignReducer: Reducer<AsyncState<any, any>, AnyAction> = (\n  state: AsyncState<any, any> = naiveAsyncInitialState,\n  action: AnyAction\n) =>\n  isAsyncAction(action) &&\n  action[naiveAsyncEmoji].phase === \"assign\" &&\n  isAsyncState(action.payload)\n    ? action.payload\n    : state;\n\nexport const asyncStateReducer = chain(\n  callReducer,\n  syncReducer,\n  dataReducer,\n  errorReducer,\n  doneReducer,\n  resetReducer,\n  assignReducer\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport lodashDebounce from \"lodash.debounce\";\nimport lodashThrottle from \"lodash.throttle\";\nimport * as React from \"react\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { useState } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { Provider, useDispatch, useStore } from \"react-redux\";\nimport { Action, Dispatch, Middleware, Reducer } from \"redux\";\nimport { Observable, Subject, Subscription } from \"rxjs\";\n// tslint:disable-next-line: no-submodule-imports\nimport { filter, first, mergeMap } from \"rxjs/operators\";\nimport {\n  AnyAction,\n  AsyncAction,\n  AsyncActionCreator,\n  asyncActionCreatorFactory,\n  asyncActionMatcher,\n  AsyncFunction,\n  AsyncMeta,\n  AsyncPhase,\n  AsyncState,\n  ErrRetryCb,\n  isAsyncAction,\n  naiveAsyncEmoji,\n  NaiveAsyncFunction,\n  naiveAsyncInitialMeta,\n  naiveAsyncInitialState,\n  NaiveAsyncSlice,\n  OnData,\n  OnError,\n} from \"./actions\";\nimport { KeyedCache } from \"./keyedcache\";\nimport { $from, $toMiddleware } from \"./observables\";\nimport { asyncStateReducer } from \"./reducer\";\n\nconst cache = new KeyedCache<AsyncLifecycle<any, any>>();\n\nconst metaCache = new KeyedCache<AsyncMeta<any, any>>();\n\ntype ControllableChildren<State> = (\n  state: State,\n  dispatch: <A extends AnyAction>(action: A) => void\n) => React.ReactNode;\n\ninterface ControllableProps<State> {\n  children: ControllableChildren<State>;\n}\n\nexport type Controllerable<State> = React.ComponentType<\n  ControllableProps<State>\n>;\n\n/**\n * A managed async function () => Promise and identifier, with factory-made selectors, dispatch actions, and other goodies\n * @interface AsyncLifecycle\n * @template Data - the 'response' type\n * @template Params - the 'request' type\n */\nexport interface AsyncLifecycle<Data, Params> {\n  /** The identifier of the async state that owns this */\n  readonly id: string;\n  /** The asynchronous operation */\n  readonly operation: NaiveAsyncFunction<Data, Params>;\n  /** Returns the `AsyncState` instance owned by this manager. */\n  readonly selector: (state: NaiveAsyncSlice) => AsyncState<Data, Params>;\n  /** Action creator that resets the state for this asyncOperation, triggers the associated `AsyncOperation` when dispatched, passing any parameters directly through. */\n  readonly call: AsyncActionCreator<Params>;\n  /** Action creator that triggers the associated `AsyncOperation` when dispatched, reusing the last remaining params. Does not reset data or error states, making it useful for polling data. */\n  readonly sync: AsyncActionCreator<Params | undefined>;\n  /**\n   * Removes the `AsyncState` instance owned by this `AsyncLifecycle` from the state tree, and removes its registry from the internal cache.\n   * `AsyncState` objects will remain in the state tree until they are destroyed, even if they are no longer being used by their components on the dom.\n   * For React components, a good practice is to dispatch the `destroy` action in the component's `componentWillUnmount` method, or with\n   * useEffect(() => {\n   *   lifecycle.call({})\n   *   return () => lifecycle.destroy({})\n   * })\n   */\n  readonly destroy: AsyncActionCreator<undefined>;\n  /** Action dispatched internally when the associated `AsyncOperation` emits data. */\n  readonly data: AsyncActionCreator<Data>;\n  /** Action dispatched internally when the associated `AsyncOperation` emits an error (rejects) or throws an exception. */\n  readonly error: AsyncActionCreator<string>;\n  /** Action dispatched internally when the associated `AsyncOperation` completes (resolves, or emits all data in the case of an `Observable` or `AsyncIterable`). */\n  readonly done: AsyncActionCreator<undefined>;\n  /** Action dispatched internally when the associated `AsyncOperation` is reset to it's initialState. */\n  readonly reset: AsyncActionCreator<undefined>;\n  /**\n   * Meta toggle to enable memoized responses on the lifecycle.\n   * Memoized responses means that responses will be cached and subsequent requests with similar params will return the cached data.\n   * The memoize cache is not invincible, and might be prone to memory leaks with exceptional usage.\n   * Toggling will reset the memo.\n   */\n  readonly memoized: (enabled: boolean) => AsyncLifecycle<Data, Params>;\n  /** Meta toggle to throttle the promise for N milliseconds (execute this function at most once every N milliseconds.) */\n  readonly throttle: (throttle: number) => AsyncLifecycle<Data, Params>;\n  /** Meta toggle to debounce the promise for N milliseconds (execute this function only if N milliseconds have passed without it being called.) (good for search) */\n  readonly debounce: (debounce: number) => AsyncLifecycle<Data, Params>;\n  /** Meta toggle to enable an N millisecond timeout of the promise, dispatching 'error' timeout if the request takes too long. (0 will disable) */\n  readonly timeout: (timeout: number) => AsyncLifecycle<Data, Params>;\n  /** Meta toggle to reattempt the promise N times, dispatching the last error on the final retry (0 will disable) */\n  readonly retries: (\n    retries: number,\n    errRetryCb?: ErrRetryCb\n  ) => AsyncLifecycle<Data, Params>;\n  /** (still in development) Meta toggle to enable a millisecond (sync) repeat of the operation with its previously supplied params. (0 will disable) */\n  readonly subscribe: AsyncActionCreator<number>;\n  /** Assign a callback function to be called when the 'data' event is dispatched. */\n  readonly onData: (onData: OnData<Data>) => AsyncLifecycle<Data, Params>;\n  /** Assign a callback function to be called when the 'error' event is dispatched. */\n  readonly onError: (onError: OnError) => AsyncLifecycle<Data, Params>;\n  /** Selects the meta object, a snapshot of this lifecycles metaCache for debugging analysis. */\n  readonly meta: () => AsyncMeta<Data, Params>;\n  /** Utility action to assign the provided AsyncState to the redux store. Its use in testing is encouraged, its use in prod is not. */\n  readonly assign: AsyncActionCreator<AsyncState<Data, Params>>;\n  /** Returns a promise that awaits operation resolve (resolves to data or rejects with errors). Useful for testing. */\n  readonly awaitResolve: () => Promise<Data>;\n  /** Returns a promise that awaits operation reject (resolves to data or rejects with errors). Useful for testing. */\n  readonly awaitReject: () => Promise<Data>;\n}\n\n/** the initial slice state for use in a redux store */\nexport const naiveAsyncInitialSlice = { [naiveAsyncEmoji]: {} };\n\n/** a reducer to plug into your redux combineReducers */\nexport const naiveAsyncReducer: Reducer<NaiveAsyncSlice> = (\n  state = naiveAsyncInitialSlice,\n  action: AnyAction\n) => {\n  // only process managed actions\n  if (isAsyncAction(action)) {\n    const name = action[naiveAsyncEmoji].name;\n    const currentState = state[naiveAsyncEmoji] || {};\n    const nextState = { ...state, [naiveAsyncEmoji]: { ...currentState } };\n    // aside from the destroy action,\n    if (action[naiveAsyncEmoji].phase === \"destroy\") {\n      delete nextState[naiveAsyncEmoji][name];\n      cache.remove(name);\n      metaCache.remove(name);\n    } else {\n      nextState[naiveAsyncEmoji][name] = asyncStateReducer(\n        nextState[naiveAsyncEmoji][name],\n        action\n      );\n    }\n    return nextState;\n  }\n  return state;\n};\n\nexport const combinedAsyncableReducer: Reducer<{ [index: string]: any }> = (\n  state = {},\n  action: AnyAction\n) => naiveAsyncReducer(state as NaiveAsyncSlice, action)[naiveAsyncEmoji];\n\nconst matchCallOrSyncOrDestroy =\n  (asyncLifeCycle: AsyncLifecycle<any, any>) => (action: AnyAction) => {\n    const { payload } = action;\n    const { call, destroy, sync } = asyncLifeCycle;\n    const matchCall = call(payload).match;\n    const matchDestroy = destroy().match;\n    const matchSync = sync(payload).match;\n    const actionPayload = { ...action, payload };\n    return (\n      matchCall(actionPayload) ||\n      matchSync(actionPayload) ||\n      matchDestroy(actionPayload)\n    );\n  };\n\nconst resolveObservableAs = (\n  action$: Observable<Action<any>>,\n  asyncLifeCycle: AsyncLifecycle<any, any>,\n  value: any\n): Observable<Action<any>> => {\n  const { data, done } = asyncLifeCycle;\n  return new Observable((subscriber) => {\n    const subscription = $from(Promise.resolve(value)).subscribe(\n      (nextData: any) => subscriber.next(data(nextData)),\n      (err: any) => `noop ${err}`,\n      () => subscriber.next(done())\n    );\n    action$\n      .pipe(filter(matchCallOrSyncOrDestroy(asyncLifeCycle)), first())\n      .subscribe(() => subscription.unsubscribe());\n  });\n};\n\nconst operationWithMeta = (\n  operation: NaiveAsyncFunction<any, any>,\n  payload: any,\n  meta: AsyncMeta<any, any>\n) => {\n  const { timeout } = meta;\n  if (!isNaN(timeout) && timeout > 0) {\n    const timeoutRejectPromise = new Promise((_, reject) =>\n      // eslint-disable-next-line prefer-promise-reject-errors\n      setTimeout(() => reject(`timeout`), timeout)\n    );\n    return Promise.race([operation(payload), timeoutRejectPromise]);\n  }\n  return operation(payload);\n};\n\nconst observableFromAsyncLifeCycle = (\n  action$: Observable<Action<any>>,\n  asyncLifeCycle: AsyncLifecycle<any, any>,\n  payload: any,\n  meta: AsyncMeta<any, any>\n): Observable<Action<any>> =>\n  new Observable((subscriber) => {\n    const { id, operation, data, error, done } = asyncLifeCycle;\n    try {\n      const subscription: Subscription = $from(\n        operationWithMeta(operation, payload, meta)\n      ).subscribe(\n        (nextData: any) => subscriber.next(data(nextData)),\n        (err: string | undefined) => subscriber.next(error(err)),\n        () => subscriber.next(done())\n      );\n      action$\n        .pipe(filter(matchCallOrSyncOrDestroy(asyncLifeCycle)), first())\n        .subscribe(() => subscription.unsubscribe());\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `unexpected error calling observable from lifecycle ${id}`,\n        err\n      );\n      subscriber.next(error(err as any));\n    }\n  });\n\nconst AsyncableEpicOnPhase = (\n  action$: Observable<Action<any>>,\n  phase: AsyncPhase,\n  reuseParams: boolean\n): Observable<Action> => {\n  const phaseMatcher = asyncActionMatcher(undefined, phase);\n  const mergeMapAction = (action: AsyncAction<any>) => {\n    const name = action[naiveAsyncEmoji].name;\n    const meta = { ...naiveAsyncInitialMeta, ...metaCache.get(name) };\n    const { memo, lastParams } = meta;\n    const now = Date.now();\n    const payload =\n      reuseParams && action.payload === undefined ? lastParams : action.payload;\n    const actionAsyncLifecycle = cache.get(name);\n    // if the dispatched action doesn't have an assigned lifecycle\n    if (!actionAsyncLifecycle) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `No lifecycle found for dispatched action ${action.type} ${name}`\n      );\n      return new Observable<never>();\n    }\n    // if using a memoized record\n    if (memo) {\n      const memoized = memo.get(JSON.stringify(payload));\n      if (memoized) {\n        return resolveObservableAs(action$, actionAsyncLifecycle, memoized);\n      }\n    }\n    metaCache.set(name, { ...meta, lastParams: payload, lastCalled: now });\n    return observableFromAsyncLifeCycle(\n      action$,\n      actionAsyncLifecycle,\n      payload,\n      meta\n    );\n  };\n  return action$.pipe(filter(phaseMatcher), mergeMap(mergeMapAction));\n};\n\nconst responseDispatchOnPhase = (\n  action$: Observable<Action<any>>,\n  phase: AsyncPhase,\n  dispatch: Dispatch<AnyAction>\n): Observable<Action> => {\n  const phaseMatcher = asyncActionMatcher(undefined, phase);\n  const mergeMapDataAction = (action: AsyncAction<any>) => {\n    const name = action[naiveAsyncEmoji].name;\n    const meta: AsyncMeta<any, any> = {\n      ...naiveAsyncInitialMeta,\n      ...metaCache.get(name),\n    };\n    // onData\n    if (phase === \"data\" && meta.onData) {\n      meta.onData(action.payload, dispatch);\n    }\n    // onError\n    if (phase === \"error\" && meta.onError) {\n      meta.onError(action.payload, dispatch);\n    }\n    // onData\n    if (phase === \"data\" && meta.awaitResolve) {\n      meta.awaitResolve(action.payload);\n    }\n    // onError\n    if (phase === \"error\" && meta.awaitReject) {\n      meta.awaitReject(action.payload);\n    }\n    // memoize\n    if (phase === \"data\" && meta.memo) {\n      meta.memo.set(JSON.stringify(meta.lastParams), action.payload);\n    }\n    // subscirbe\n    if (phase === \"subscribe\") {\n      const actionAsyncLifecycle = cache.get(name);\n      const subscribe: number = action.payload;\n      clearInterval(meta?.subscribeInterval);\n      const subscribeInterval =\n        actionAsyncLifecycle && subscribe > 0\n          ? setInterval(() => dispatch(actionAsyncLifecycle.sync()), subscribe)\n          : undefined;\n      metaCache.set(name, { ...meta, subscribe, subscribeInterval });\n      return new Observable<never>();\n    }\n\n    const dataCount = phase === \"data\" ? meta.dataCount + 1 : 0;\n    const errorCount = phase === \"error\" ? meta.errorCount + 1 : 0;\n    const awaitResolve =\n      meta.awaitResolve && phase === \"data\" ? undefined : meta.awaitResolve;\n    const awaitReject =\n      meta.awaitReject && phase === \"error\" ? undefined : meta.awaitReject;\n    const record = Date.now() - meta.lastCalled;\n    metaCache.set(name, {\n      ...meta,\n      dataCount,\n      errorCount,\n      record,\n      awaitResolve,\n      awaitReject,\n    });\n    return new Observable<never>();\n  };\n  return action$.pipe(\n    filter(phaseMatcher),\n    mergeMap(mergeMapDataAction)\n  ) as Observable<Action<any>>;\n};\n\n/**\n * asyncableMiddleware is the higher order function for dispatching events to the store\n * @param {*} store\n * @returns\n */\nexport const naiveAsyncMiddleware: Middleware = (store) => {\n  const action$: Subject<Action> = new Subject();\n  const middleware = $toMiddleware(action$);\n  AsyncableEpicOnPhase(action$, \"call\", false).subscribe(store.dispatch);\n  AsyncableEpicOnPhase(action$, \"sync\", true).subscribe(store.dispatch);\n  responseDispatchOnPhase(action$, \"data\", store.dispatch).subscribe(\n    store.dispatch\n  );\n  responseDispatchOnPhase(action$, \"error\", store.dispatch).subscribe(\n    store.dispatch\n  );\n  responseDispatchOnPhase(action$, \"subscribe\", store.dispatch).subscribe(\n    store.dispatch\n  );\n  return middleware(store);\n};\n\nconst selectFunction = (id: string) => (state: NaiveAsyncSlice) => {\n  const substate: any = state[naiveAsyncEmoji];\n  if (substate) {\n    if (naiveAsyncEmoji in substate) {\n      return substate[naiveAsyncEmoji][id] || naiveAsyncInitialState;\n    }\n    return substate[id] || naiveAsyncInitialState;\n  }\n  return naiveAsyncInitialState;\n};\n\nconst retryOperation = <Params extends {}, Data>(\n  operation: AsyncFunction<Params, Data>,\n  errRetryCb: ErrRetryCb,\n  retries = 0\n): AsyncFunction<Params, Data> => {\n  if (retries <= 0) {\n    return operation;\n  }\n  return (params: Params) =>\n    operation(params).catch((err: any) => {\n      errRetryCb(err, retries);\n      return retryOperation(operation, errRetryCb, retries - 1)(params);\n    });\n};\n\n/**\n * returns the lifecycle registered with the given id, or undefined if not found\n * NOTE: impure function, refers to managed internal cache of created lifecycles\n * @param {string} id\n * @return {*}  {(AsyncLifecycle<any, any> | undefined)}\n */\nexport const findLifecycleById = (\n  id: string\n): AsyncLifecycle<any, any> | undefined => {\n  const existing = id && cache.get(id);\n  if (existing) {\n    return existing;\n  }\n  return undefined;\n};\n\n/**\n * wraps a NaiveAsyncFunction and a unique identifier to provide a redux store managed lifecycle\n * that manages the given async operation\n * @template Data\n * @template Params\n * @param {NaiveAsyncFunction<Data, Params>} operation\n * @param {string} id\n * @returns {AsyncLifecycle<Data, Params>}\n */\nexport const asyncLifecycle = <Data, Params extends {}>(\n  id: string,\n  operation: NaiveAsyncFunction<Data, Params>\n): AsyncLifecycle<Data, Params> => {\n  const existing = id && cache.get(id);\n  if (existing) {\n    return existing;\n  }\n  const factory = asyncActionCreatorFactory(id);\n  const lifecycle: AsyncLifecycle<Data, Params> = {\n    id,\n    operation,\n    selector: selectFunction(id),\n    call: factory<Params>(\"call\"),\n    sync: factory<Params | undefined>(\"sync\"),\n    destroy: factory<undefined>(\"destroy\"),\n    data: factory<Data>(\"data\"),\n    error: factory<string>(\"error\"),\n    done: factory<undefined>(\"done\"),\n    reset: factory<undefined>(\"reset\"),\n    assign: factory<AsyncState<Data, Params>>(\"assign\"),\n    subscribe: factory<number>(\"subscribe\"),\n    memoized: (enabled: boolean) => {\n      const memo = enabled ? new KeyedCache<any>() : undefined;\n      const meta = { ...metaCache.get(id), memo };\n      metaCache.set(id, { ...naiveAsyncInitialMeta, ...meta });\n      return lifecycle;\n    },\n    onData: (onData: OnData<Data>) => {\n      const meta = { ...metaCache.get(id), ...{ onData } };\n      metaCache.set(id, { ...naiveAsyncInitialMeta, ...meta });\n      return lifecycle;\n    },\n    onError: (onError: OnError) => {\n      const meta = { ...metaCache.get(id), ...{ onError } };\n      metaCache.set(id, { ...naiveAsyncInitialMeta, ...meta });\n      return lifecycle;\n    },\n    timeout: (timeout: number) => {\n      const meta = { ...metaCache.get(id), ...{ timeout } };\n      metaCache.set(id, { ...naiveAsyncInitialMeta, ...meta });\n      return lifecycle;\n    },\n    throttle: (throttle: number) => {\n      const thisMeta = metaCache.get(id);\n      const meta = { ...thisMeta, ...{ throttle } };\n      const operation = lodashThrottle(\n        lifecycle.operation,\n        throttle\n      ) as AsyncFunction<any, any>;\n      const updatedLifecycle = { ...lifecycle, operation };\n      metaCache.set(id, { ...naiveAsyncInitialMeta, ...meta });\n      cache.set(id, updatedLifecycle);\n      return updatedLifecycle;\n    },\n    debounce: (debounce: number) => {\n      const thisMeta = metaCache.get(id);\n      const meta = { ...thisMeta, ...{ debounce } };\n      const operation = lodashDebounce(lifecycle.operation, debounce, {\n        leading: true,\n        trailing: true,\n      }) as AsyncFunction<any, any>;\n      const updatedLifecycle = { ...lifecycle, operation };\n      metaCache.set(id, { ...naiveAsyncInitialMeta, ...meta });\n      cache.set(id, updatedLifecycle as AsyncLifecycle<any, any>);\n      return updatedLifecycle;\n    },\n    retries: (retries: number, errRetryCb: ErrRetryCb = () => \"noop\") => {\n      const thisMeta = metaCache.get(id);\n      const meta = { ...thisMeta, ...{ retries, errRetryCb } };\n      const operation = retryOperation(\n        lifecycle.operation,\n        errRetryCb,\n        retries\n      );\n      const updatedLifecycle = { ...lifecycle, operation };\n      metaCache.set(id, { ...naiveAsyncInitialMeta, ...meta });\n      cache.set(id, updatedLifecycle);\n      return updatedLifecycle;\n    },\n    meta: () => ({ ...naiveAsyncInitialMeta, ...metaCache.get(id) }),\n    awaitResolve: async () => {\n      const thisMeta = metaCache.get(id);\n      let awaitResolve: (value: Data) => void = () => null;\n      const awaitedPromise = new Promise<Data>((resolve) => {\n        awaitResolve = resolve;\n      });\n      const meta = { ...thisMeta, ...{ awaitResolve } };\n      metaCache.set(id, { ...naiveAsyncInitialMeta, ...meta });\n      return awaitedPromise;\n    },\n    awaitReject: async () => {\n      const thisMeta = metaCache.get(id);\n      let awaitResolve: (value: Data) => void = () => null;\n      let awaitReject: (reason?: any) => void = () => null;\n      const awaitedPromise = new Promise<Data>((resolve, reject) => {\n        awaitResolve = resolve;\n        awaitReject = reject;\n      });\n      const meta = { ...thisMeta, ...{ awaitResolve, awaitReject } };\n      metaCache.set(id, { ...naiveAsyncInitialMeta, ...meta });\n      return awaitedPromise;\n    },\n  };\n  cache.set(id, lifecycle);\n  return lifecycle;\n};\n\n/**\n * Wraps a NaiveAsyncFunction and a unique identifier to provide a redux store managed lifecycle\n * that manages the given async operation, recognized by the given id\n * @template Data\n * @template Params\n * @deprecated favor asyncLifecycle instead\n * @param {NaiveAsyncFunction<Data, Params>} operation\n * @param {string} id\n * @returns {AsyncLifecycle<Data, Params>}\n */\nexport const naiveAsyncLifecycle = <Data, Params extends {}>(\n  id: string,\n  operation: AsyncFunction<Params, Data>\n): AsyncLifecycle<Data, Params> => asyncLifecycle(id, operation);\n\n/**\n * Creates a controllable context, wrapping the provided reducer and middleware around dispatched actions.\n *\n * @export\n * @template State\n * @param {Reducer<State>} reducer\n * @param {Middleware} middleware\n * @return {*}  {Controllerable<State>}\n */\nexport const createControllableContext = <State extends NaiveAsyncSlice>(\n  reducer: Reducer<State>,\n  middleware: Middleware\n): Controllerable<State> => {\n  const Controllable = <State extends NaiveAsyncSlice>(\n    props: ControllableProps<State>\n  ) => {\n    const store = useStore();\n    const dp = useDispatch();\n    const [state, setState] = useState<NaiveAsyncSlice>(\n      reducer(undefined, { type: \"\" })\n    );\n    const internalDispatch: Dispatch<AnyAction> = <A extends Action>(\n      action: A\n    ) => {\n      const dispatchedAction = dp(action);\n      setState(reducer(store.getState(), dispatchedAction));\n      return dp(dispatchedAction);\n    };\n    const dispatch = middleware({\n      dispatch: internalDispatch, // dispatches loading states\n      getState: () => state,\n    })(internalDispatch); // dispatches done and error states\n    return (\n      <Provider store={store}>\n        {props.children(state as State, dispatch)}\n      </Provider>\n    );\n  };\n  return Controllable;\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { naiveAsyncInitialState, AsyncState } from \"./actions\";\n\n/**\n * helper function to return the default initial AsyncableState\n * @param {P} params - params provided to function\n */\nexport const mockInitialAsyncState: () => AsyncState<any, any> = () => ({\n  ...naiveAsyncInitialState,\n});\n\n/**\n * helper function to return an 'inflight' status AsyncableState\n * @param {P} params - params provided to function\n */\nexport const mockInflightAsyncState: <P extends {}>(\n  mockParams: P\n) => AsyncState<any, P> = (params) => ({\n  ...naiveAsyncInitialState,\n  status: \"inflight\",\n  params,\n});\n\n/**\n * helper function to return an 'error' status AsyncableState\n * @param {string} error - error string returned to the function\n */\nexport const mockErrorAsyncState: (error: string) => AsyncState<any, any> = (\n  error\n) => ({\n  ...naiveAsyncInitialState,\n  status: \"error\",\n  error,\n});\n\n/**\n * helper function to return an 'done' status AsyncableState\n * @param {D} data - data returned to the function\n * @param {P} params - params provided to function\n */\nexport const mockDoneAsyncState: <D, P extends {}>(\n  data: D,\n  params: P\n) => AsyncState<D, P> = (data, params) => ({\n  ...naiveAsyncInitialState,\n  status: \"done\",\n  data,\n  params,\n});\n\n/**\n * helper function to return all four mocked async states given the appropriate mocks\n * @param {D} data - data returned to the function\n * @param {P} params - params provided to function\n * @param {string} error - string error object returned by the function\n */\nexport const mockedAsyncStates: <D, P extends {}>(\n  data: D,\n  params: P,\n  error: string\n) => Array<AsyncState<D, P>> = (data, params, error) => [\n  mockInitialAsyncState(),\n  mockInflightAsyncState(params),\n  mockErrorAsyncState(error),\n  mockDoneAsyncState(data, params),\n];\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  AnyAction,\n  AsyncMeta,\n  AsyncState,\n  NaiveAsyncFunction,\n} from \"./actions\";\nimport {\n  asyncLifecycle,\n  AsyncLifecycle,\n  createControllableContext,\n  naiveAsyncMiddleware,\n  naiveAsyncReducer,\n} from \"./controllable\";\n\ntype NaiveAsyncComponentChildren<Data, Params> = (\n  state: AsyncState<Data, Params>,\n  call: (params: Params) => void\n) => JSX.Element;\ninterface AsyncComponentChildrenProps<D, P> {\n  state: AsyncState<D, P>;\n  meta: AsyncMeta<D, P>;\n  call: (params: P) => void;\n  sync: (params: P) => void;\n  reset: () => void;\n  destroy: () => void;\n  subscribe: (val: number) => void;\n}\nexport type AsyncComponentChildren<Data, Params> = (\n  childrenProps: AsyncComponentChildrenProps<Data, Params>\n) => JSX.Element;\n\nexport interface AsyncComponentProps<Data, Params> {\n  children: AsyncComponentChildren<Data, Params>;\n  lifecycle: AsyncLifecycle<Data, Params>;\n  initialState?: AsyncState<Data, Params>;\n}\n\nexport interface AsyncComponentProps<Data, Params> {\n  children: AsyncComponentChildren<Data, Params>;\n  lifecycle: AsyncLifecycle<Data, Params>;\n  autoParams?: Params;\n}\n\nexport interface NaiveAsyncComponentProps<Data, Params> {\n  id?: string;\n  operation?: NaiveAsyncFunction<Data, Params>;\n  autoParams?: Params;\n  children: NaiveAsyncComponentChildren<Data, Params>;\n}\n\nexport interface NaiveLifecycleAsyncProps<Data, Params> {\n  params?: Params;\n  state: AsyncState<Data, Params>;\n  call: (params: Params) => void;\n  destroy: () => void;\n  children: NaiveAsyncComponentChildren<Data, Params>;\n}\n\nexport interface LifecycleAsyncProps<Data, Params> {\n  state: AsyncState<Data, Params>;\n  meta: AsyncMeta<Data, Params>;\n  call: (params: Params) => void;\n  sync: (params?: Params) => void;\n  reset: () => void;\n  destroy: () => void;\n  subscribe: (val: number) => void;\n  children: AsyncComponentChildren<Data, Params>;\n}\n\nconst NaiveAsyncManaged: React.FC<NaiveLifecycleAsyncProps<any, any>> = <\n  Data,\n  Params\n>(\n  props: NaiveLifecycleAsyncProps<Data, Params>\n) => {\n  const { call, params, children, state, destroy } = props;\n  useEffect(() => {\n    if (params) {\n      call(params);\n    }\n    // destroy is called when the component unmounts\n    return destroy;\n    // eslint-disable-next-line\n  }, []);\n  return children(state, call);\n};\n\nexport const AsyncManaged: React.FC<LifecycleAsyncProps<any, any>> = <\n  Data,\n  Params\n>(\n  props: LifecycleAsyncProps<Data, Params>\n) => {\n  const { call, children, state, destroy, reset, sync, meta, subscribe } =\n    props;\n  return children({ state, call, reset, destroy, sync, meta, subscribe });\n};\n\nconst noop = () => Promise.resolve({});\n\n/**\n * The NaiveAsync tag accepts an operation and autoParams object of initial parameters to pass in.\n * @export\n * @template Data\n * @template Params\n * @param {NaiveAsyncComponentProps<Data, Params>} props\n * @returns {React.ReactElement<NaiveAsyncComponentProps<Data, Params>>}\n */\n\nexport const NaiveAsync = <Data, Params extends {}>(\n  props: NaiveAsyncComponentProps<Data, Params>\n): React.ReactElement<NaiveAsyncComponentProps<Data, Params>> => {\n  const {\n    operation = noop,\n    children,\n    autoParams,\n    id = operation?.name,\n  } = props;\n  const [state, setState] = useState({\n    params: autoParams,\n    asyncLifeCycle: asyncLifecycle(id, operation),\n    AsyncControllable: createControllableContext(\n      naiveAsyncReducer,\n      naiveAsyncMiddleware\n    ),\n  });\n  const { params, asyncLifeCycle, AsyncControllable } = state;\n  const { selector, call, destroy } = asyncLifeCycle;\n  const invoke = (params: Params) => {\n    setState({ ...state, params });\n  };\n  return (\n    <AsyncControllable>\n      {(reduxState, dispatch) => (\n        <NaiveAsyncManaged\n          params={params}\n          state={selector(reduxState)}\n          call={(params: any) => {\n            invoke(params as Params);\n            dispatch(call(params as Params));\n          }}\n          destroy={() => {\n            dispatch(destroy());\n          }}\n        >\n          {children}\n        </NaiveAsyncManaged>\n      )}\n    </AsyncControllable>\n  );\n};\n\n/**\n * The Async tag accepts a lifecycle, and an optional desired initial state for the operation (without triggering the underlying async function)\n * @export\n * @template Data\n * @template Params\n * @param {AsyncComponentProps<Data, Params>} props\n * @returns {React.ReactElement<AsyncComponentProps<Data, Params>>}\n */\n\nexport const Async = <Data, Params extends {}>(\n  props: AsyncComponentProps<Data, Params>\n): React.ReactElement<AsyncComponentProps<Data, Params>> => {\n  const { children, lifecycle, initialState } = props;\n  const [intervalTickle, setIntervalTickle] = useState(0);\n  const [state, setState] = useState({\n    initState: initialState || undefined,\n    Controllable: createControllableContext(\n      naiveAsyncReducer,\n      naiveAsyncMiddleware\n    ),\n    subscribeInterval: undefined as any,\n  });\n  const assignState = (\n    dispatch: (action: AnyAction) => void,\n    asyncState: AsyncState<Data, Params>\n  ) => {\n    dispatch(assign(asyncState));\n    setState({ ...state, initState: undefined });\n  };\n  const { Controllable, initState } = state;\n  useEffect(() => {\n    \"noop to rerender\";\n  }, [intervalTickle]);\n  const { selector, call, destroy, reset, sync, meta, assign, subscribe } =\n    lifecycle;\n  return (\n    <Controllable>\n      {(reduxState, dispatch) => {\n        if (initState) {\n          assignState(dispatch, initState);\n        }\n        return (\n          <AsyncManaged\n            state={selector(reduxState)}\n            meta={meta()}\n            call={(params: any) => {\n              dispatch(call(params as Params));\n            }}\n            destroy={() => {\n              dispatch(destroy());\n            }}\n            sync={(params?: any) => {\n              dispatch(sync(params as Params));\n            }}\n            reset={() => {\n              dispatch(reset());\n            }}\n            subscribe={(val: number) => {\n              clearInterval(state.subscribeInterval);\n              const subscribeInterval =\n                val > 0\n                  ? setInterval(() => setIntervalTickle(Math.random()), val)\n                  : undefined;\n              setState({ ...state, subscribeInterval });\n              dispatch(subscribe(val));\n            }}\n          >\n            {children as any}\n          </AsyncManaged>\n        );\n      }}\n    </Controllable>\n  );\n};\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  applyMiddleware,\n  compose,\n  createStore,\n  Middleware,\n  Store,\n  StoreEnhancer,\n} from \"redux\";\nimport {\n  naiveAsyncEmoji,\n  naiveAsyncMiddleware,\n  naiveAsyncReducer,\n  NaiveAsyncSlice,\n} from \"../naiveasync\";\n// the following resources are needed to specify a redux store with devtools enabled\n\ntype ReduxWindow = Window & {\n  __REDUX_DEVTOOLS_EXTENSION__?: any;\n};\n\nconst getEnhancers = () => {\n  const enhancers: StoreEnhancer[] = [];\n  const windoww: ReduxWindow | undefined = window ? window : undefined;\n  const devToolsExtension: () => StoreEnhancer =\n    windoww?.__REDUX_DEVTOOLS_EXTENSION__;\n  if (windoww != null && typeof devToolsExtension === \"function\") {\n    enhancers.push(devToolsExtension());\n  }\n  return enhancers;\n};\nexport const initialState: NaiveAsyncSlice = {\n  [naiveAsyncEmoji]: {},\n};\nconst middlewares: Middleware[] = [naiveAsyncMiddleware];\nconst enhancers: StoreEnhancer[] = getEnhancers();\nconst composedEnhancers: StoreEnhancer = compose(\n  applyMiddleware(...middlewares),\n  ...enhancers\n);\n\nexport const createConnectedStore = (): Store =>\n  createStore(naiveAsyncReducer, initialState, composedEnhancers);\n","import React from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport Highlight from \"react-highlight\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { Provider } from \"react-redux\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { Link } from \"react-router-dom\";\nimport packageJSON from \"../../package.json\";\n// tslint:disable-next-line: ordered-imports no-implicit-dependencies\nimport {\n  NaiveAsync,\n  naiveAsyncInitialState,\n  NaiveAsyncState,\n} from \"../naiveasync\";\nimport { createConnectedStore } from \"../utils/store\";\n\ninterface DataValue {\n  value: string;\n}\n\ninterface ParamsValue {\n  foo: string;\n}\n\nconst version = packageJSON.version;\n\nconst exampleInit = naiveAsyncInitialState;\nconst exampleInflight = {\n  ...exampleInit,\n  status: \"inflight\",\n  params: {\n    user: \"admin\",\n    password: \"hunter2\",\n  },\n};\nconst exampleError = {\n  ...exampleInflight,\n  status: \"error\",\n  error: \"kaboom typerror\",\n};\nconst exampleDone = {\n  ...exampleInflight,\n  status: \"done\",\n  data: { \"evil-secrets\": \"...\" },\n};\nconst examples = [exampleInit, exampleInflight, exampleError, exampleDone];\nconst pickedExample = examples[Math.floor(4 * Math.random())];\n\nconst asyncOperation = (params: ParamsValue): Promise<DataValue> =>\n  new Promise((resolve, reject) => {\n    const r = Math.random();\n    const time = r * 1000;\n\n    setTimeout(() => {\n      if (r < 0.8) {\n        resolve({ value: `success! ${params.foo} ${time}` });\n      }\n      reject(new Error(\"an error was thrown\"));\n    }, time);\n  });\n\nconst asyncableView = (\n  state: NaiveAsyncState<DataValue, ParamsValue>,\n  call: (params: ParamsValue) => void\n) => (\n  <div>\n    <h2>status: {state.status}</h2>\n    <h2>params: {JSON.stringify(state.params)}</h2>\n    <h2>error: {state.error}</h2>\n    <h2>data: {JSON.stringify(state.data)}</h2>\n    <button onClick={() => call({ foo: \"foo\" })}>\n      <p>foo</p>\n    </button>\n    <button onClick={() => call({ foo: \"bar\" })}>\n      <p>bar</p>\n    </button>\n    <button onClick={() => call({ foo: \"baz\" })}>\n      <p>baz</p>\n    </button>\n  </div>\n);\n\nconst lifecycleflowimage =\n  \"https://naiveasync.untra.io/images/naiveasync-flow.png\";\n\nconst store = createConnectedStore();\n\nexport default class Home extends React.Component<{}> {\n  public render() {\n    return (\n      <Provider store={store}>\n        <div className=\"page-content\">\n          <div className=\"wrapper\">\n            <h1>\n              <span role=\"img\" aria-label=\"Bento\">\n                🔁\n              </span>{\" \"}\n              NaiveAsync\n            </h1>\n            <h2>\n              an opinionated and painless{\" \"}\n              <a href=\"https://reactjs.org/\">React</a> n{\" \"}\n              <a href=\"https://redux.js.org/\">Redux</a> promise wrapper\n            </h2>\n            <h3>\n              v{version} - <Link to=\"/test\">Tests</Link>-{\" \"}\n              <a href=\"https://github.com/untra/naiveasync\">Github</a> -{\" \"}\n              <a href=\"https://www.npmjs.com/package/@untra/naiveasync\">NPM</a>{\" \"}\n              - <a href=\"https://naiveasync.untra.io/docs\">Docs</a>\n            </h3>\n            <NaiveAsync id=\"asyncOp\" operation={asyncOperation}>\n              {asyncableView}\n            </NaiveAsync>\n            <p>\n              NaiveAsync is a React Component that wraps a{\" \"}\n              <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">\n                promise\n              </a>{\" \"}\n              and exposes an abstraction to invoke the promise and access it\n              with a straightforward abstraction.\n            </p>\n            <p>\n              Child Components rendered in a NaiveAsync component have access to\n              a <code>state</code> and a <code>call</code> function.\n            </p>\n            <p>NaiveAsync takes three arguments:</p>\n            <ul>\n              <li>\n                <strong>operation:</strong>\n                <code>{`(params) => Promise`}</code> the operation takes in\n                params and returns a promise\n              </li>\n              <li>\n                <strong>id:</strong>\n                <code>{`string`}</code> optional string identifier under which\n                the component redux state is stored. If not provided, it will\n                use the function name.\n              </li>\n              <li>\n                <strong>autoParams:</strong>\n                <code>{`Params`}</code> optional params object that, if\n                provided, will be used to invoke the operation on component\n                mount.\n              </li>\n            </ul>\n            <Highlight className=\"tsx\">\n              {`// react-app-async.tsx\nimport React from \"react\";\nimport { NaiveAsync } from \"@untra/naiveasync\";\n// NaiveAsync builds its own standard set of reducers and redux store\n// or perhaps written more terseley\n<NaiveAsync id=\"asyncOp\" operation={asyncoperation}>{ asyncableView }</NaiveAsync>\n`}\n            </Highlight>\n\n            <h2>naiveAsyncLifecycle(asyncOperation, id)</h2>\n            <img alt={\"the naiveasync lifecycle\"} src={lifecycleflowimage} />\n            <p>\n              the core of the async lifecycle management comes from{\" \"}\n              <code>{`naiveAsyncLifecycle`}</code>. This is available as its own\n              function and can be used for fine-grained control in react\n              components.\n            </p>\n            <code>{`const asyncLifecycle : AsyncLifecycle<Data,Params> = naiveAsyncLifecycle(function asyncoperation(params : Params) => {\n            const data : Data = {};\n            return data;\n          })`}</code>\n\n            <p>\n              the{\" \"}\n              <code>\n                <i>{`asyncLifecycle<Data,Params>`}</i>\n              </code>{\" \"}\n              object exposes the following:\n            </p>\n            <ul>\n              <li>\n                <code>\n                  <strong>id : string</strong>\n                </code>{\" \"}\n                the provided id used as the unique state identifer for the{\" \"}\n                <code>selector</code> to identify the <code>AsyncState</code> in\n                the redux store. Its optional; if not provided, the{\" \"}\n                <code>Operation.name</code> is used.\n              </li>\n              <li>\n                <code>\n                  <strong>operation : AsyncOperation</strong>\n                </code>{\" \"}\n                the provided function,{\" \"}\n              </li>\n              <li>\n                <code>\n                  <strong>selector(state : ReduxState) : AsyncState</strong>\n                </code>{\" \"}\n                this is a redux state selector against the redux state, for use\n                in <code>mapStateToProps</code>. Returns the `AsyncState`\n                instance owned by this manager.\n              </li>\n              <li>\n                <code>\n                  <strong>.call(params : Params)</strong>\n                </code>{\" \"}\n                Action creator that triggers the associated{\" \"}\n                <code>AsyncOperation</code> when dispatched, passing{\" \"}\n                <code>params</code> into the operation. Resets its state when\n                called again.\n              </li>\n              <li>\n                <code>\n                  <strong>.sync({})</strong>\n                </code>{\" \"}\n                Action creator that triggers the associated `AsyncOperation`\n                when dispatched, reusing the last employed params if none are\n                provided. Does not reset data or error states, making it useful\n                for polling / repeated operations.\n              </li>\n              <li>\n                <code>\n                  <strong>.reset({})</strong>\n                </code>{\" \"}\n                Action dispatched internally when the associated\n                `AsyncOperation` is reset to it's initial State.\n              </li>\n              <li>\n                <code>\n                  <strong>.data(data : Data)</strong>\n                </code>\n                Action dispatched internally when the associated\n                `AsyncOperation` emits data.\n              </li>\n              <li>\n                <code>\n                  <strong>.error(error : string)</strong>\n                </code>\n                Action dispatched internally when the associated\n                `AsyncOperation` emits an error (rejects) or throws an\n                exception. The error will to be coerced to a string.\n              </li>\n              <li>\n                and finally{\" \"}\n                <code>\n                  <strong>.destroy({})</strong>\n                </code>{\" \"}\n                which removes the <code>AsyncState</code> instance owned by this\n                lifecycle from the redux state tree. <code>AsyncState</code>{\" \"}\n                objects will remain in the state tree until they are destroyed,\n                even if they are no longer being used by their components on the\n                dom. This can become a memory leak if left unchecked. For React\n                components, a good practice is to dispatch the{\" \"}\n                <code>.destroy({})</code> action in the component's{\" \"}\n                <code>componentWillUnmount</code> method, or with a{\" \"}\n                <code>useEffect</code> cleanup.\n              </li>\n            </ul>\n            <p></p>\n            <Highlight className=\"tsx\">\n              {`// react-app-async.tsx\nimport React from \"react\";\nimport { naiveAsyncLifecycle } from \"@untra/naiveasync\";\n// remember, the asyncOperation is a function that takes params and returns a Promise\nconst asyncoperation : () => Promise<any> = () => fetch(\"api.example.com/users\")\n// The naiveasyncLifecycle(...) function wraps the asyncOperation and a string identifier\nconst asyncLifecycle = naiveasyncLifecycle(asyncoperation, \"ASYNC_OP_NAME\")\n// the asyncLifecycle exposes a selector that will return the current state of the operation:\n{\n  \"status\": \"${pickedExample.status}\",\n  \"params\": ${JSON.stringify(pickedExample.params)},\n  \"error\": \"${pickedExample.error}\",\n  \"data\": ${JSON.stringify(pickedExample.data)},\n}\n`}\n            </Highlight>\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n","export const mockResolve = <T extends unknown>(\n  val: T,\n  maxTime: number\n): Promise<T> =>\n  new Promise((resolve) => {\n    const timeMS = Math.random() * maxTime;\n    setTimeout(() => resolve(val), timeMS);\n  });\n\nexport const mockReject = (err: Error, maxTime: number): Promise<never> =>\n  new Promise((resolve, reject) => {\n    const timeMS = Math.random() * maxTime;\n    setTimeout(() => reject(err), timeMS);\n  });\n\nexport const slowResolve = <T extends unknown>(val: T): Promise<T> =>\n  mockResolve(val, 4000);\n\nexport const mediumResolve = <T extends unknown>(val: T): Promise<T> =>\n  mockResolve(val, 400);\n\nexport const quickResolve = <T extends unknown>(val: T): Promise<T> =>\n  mockResolve(val, 40);\n\nexport const quickReject = (err: Error): Promise<never> => mockReject(err, 40);\n\nexport const mediumReject = (err: Error): Promise<never> =>\n  mockReject(err, 400);\n\nexport const slowReject = (err: Error): Promise<never> => mockReject(err, 4000);\n","import React from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle } from \"../../naiveasync\";\nimport { NaiveAsyncState } from \"../../naiveasync/actions\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst slowIconToName = (params: {}) => {\n  // eslint-disable-next-line no-console\n  console.log(\"debounce called!\");\n  return slowResolve({\n    icon: \"\",\n    name: \"DEBOUNCE\",\n  });\n};\nconst debounceLifecycle = asyncLifecycle(\n  \"DEBOUNCE_SELECTABLE\",\n  slowIconToName\n).debounce(2000);\n\ninterface IconResp {\n  icon: string;\n  name: string;\n}\n\ninterface MP {\n  state: NaiveAsyncState<IconResp, {}>;\n}\n\ninterface DP {\n  select: (params?: {}) => void;\n}\n\ntype Props = MP & DP;\n\nconst MemoizedComponent: React.FC<Props> = ({ state, select }) => {\n  const display = `selected: ${state.data?.icon || \"...\"} (check the logs)`;\n  const status = `status: ${state.status}`;\n  const error = `error: ${state.error}`;\n  const params = `params: ${JSON.stringify(state.params)}`;\n\n  return (\n    <div>\n      <button\n        name=\"🦅\"\n        value={\"🦅\"}\n        onClick={() => select()}\n      >{`select`}</button>\n      <p>{display}</p>\n      <p>{params}</p>\n      <p>{error}</p>\n      <p>{status}</p>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: debounceLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: () => dispatch(debounceLifecycle.sync({})),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoizedComponent);\n","import React, { useState } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle, AsyncState } from \"../../naiveasync\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst slowIconToName = (params: IconParams) =>\n  slowResolve({\n    icon: params.icon,\n    name: iconToName[params.icon] || \"NOT FOUND\",\n  });\nconst memoizedLifecycle = asyncLifecycle(\"MEMOIZED_SELECTABLE\", slowIconToName);\n\nconst iconToName = {\n  \"🦅\": \"eagle\",\n  \"🐅\": \"tiger\",\n  \"🦓\": \"zebra\",\n  \"🦒\": \"giraffe\",\n  \"🐘\": \"elephant\",\n  \"🐊\": \"crocodile\",\n};\n\ninterface IconParams {\n  icon: \"🦅\" | \"🐅\" | \"🦓\" | \"🦒\" | \"🐘\" | \"🐊\";\n}\n\ninterface IconResp {\n  icon: string;\n  name: string;\n}\n\ninterface MP {\n  state: AsyncState<IconResp, IconParams>;\n}\n\ninterface DP {\n  select: (params?: IconParams) => void;\n}\n\ntype Props = MP & DP;\n\nconst MemoizedComponent: React.FC<Props> = ({ state, select }) => {\n  const [memoized, setMemoized] = useState(false);\n  const toggleMemoized = (memo: boolean) => {\n    memoizedLifecycle.memoized(memo);\n    setMemoized(memo);\n  };\n  const assign = (icon: IconParams[\"icon\"]) => () => select({ icon });\n  const display = `selected: ${state.data?.icon || \"...\"} aka ${\n    state.data?.name\n  }`;\n  const status = `status: ${state.status}`;\n  const params = `params: ${JSON.stringify(state.params)}`;\n  return (\n    <div>\n      <button name=\"🦅\" value={\"🦅\"} onClick={assign(\"🦅\")}>{`${\"🦅\"}`}</button>\n      <button name=\"🐅\" value={\"🐅\"} onClick={assign(\"🐅\")}>{`${\"🐅\"}`}</button>\n      <button name=\"🦓\" value={\"🦓\"} onClick={assign(\"🦓\")}>{`${\"🦓\"}`}</button>\n      <button name=\"🦒\" value={\"🦒\"} onClick={assign(\"🦒\")}>{`${\"🦒\"}`}</button>\n      <button name=\"🐘\" value={\"🐘\"} onClick={assign(\"🐘\")}>{`${\"🐘\"}`}</button>\n      <button name=\"🐊\" value={\"🐊\"} onClick={assign(\"🐊\")}>{`${\"🐊\"}`}</button>\n      <p>{`memoized: ${memoized}`}</p>\n      <p>{display}</p>\n      <p>{params}</p>\n      <p>{status}</p>\n      <button name=\"memoized\" onClick={() => toggleMemoized(!memoized)}>\n        toggle memoized\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: memoizedLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: (params?: IconParams) => dispatch(memoizedLifecycle.sync(params)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoizedComponent);\n","import React from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle } from \"../../naiveasync\";\nimport { AsyncMeta, AsyncState } from \"../../naiveasync/actions\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst slowIconToName = (params: IconParams) =>\n  slowResolve({\n    icon: params.icon,\n    name: iconToName[params.icon] || \"NOT FOUND\",\n  });\nconst metadataLifecycle = asyncLifecycle(\"METADATA_SELECTABLE\", slowIconToName);\n\nconst iconToName = {\n  \"🦅\": \"eagle\",\n  \"🐅\": \"tiger\",\n  \"🦓\": \"zebra\",\n  \"🦒\": \"giraffe\",\n  \"🐘\": \"elephant\",\n  \"🐊\": \"crocodile\",\n};\n\ninterface IconParams {\n  icon: \"🦅\" | \"🐅\" | \"🦓\" | \"🦒\" | \"🐘\" | \"🐊\";\n}\n\ninterface IconResp {\n  icon: string;\n  name: string;\n}\n\ninterface MP {\n  state: AsyncState<IconResp, IconParams>;\n  meta: AsyncMeta<IconResp, IconParams>;\n}\n\ninterface DP {\n  select: (params?: IconParams) => void;\n}\n\ntype Props = MP & DP;\n\nconst MemoizedComponent: React.FC<Props> = ({ state, select, meta }) => {\n  const assign = (icon: IconParams[\"icon\"]) => () => select({ icon });\n  const display = `selected: ${state.data?.icon || \"...\"} aka ${\n    state.data?.name\n  }`;\n  const status = `status: ${state.status}`;\n  const error = `error: ${state.error}`;\n  const params = `params: ${JSON.stringify(state.params)}`;\n\n  return (\n    <div>\n      <button name=\"🦅\" value={\"🦅\"} onClick={assign(\"🦅\")}>{`${\"🦅\"}`}</button>\n      <button name=\"🐅\" value={\"🐅\"} onClick={assign(\"🐅\")}>{`${\"🐅\"}`}</button>\n      <button name=\"🦓\" value={\"🦓\"} onClick={assign(\"🦓\")}>{`${\"🦓\"}`}</button>\n      <button name=\"🦒\" value={\"🦒\"} onClick={assign(\"🦒\")}>{`${\"🦒\"}`}</button>\n      <button name=\"🐘\" value={\"🐘\"} onClick={assign(\"🐘\")}>{`${\"🐘\"}`}</button>\n      <button name=\"🐊\" value={\"🐊\"} onClick={assign(\"🐊\")}>{`${\"🐊\"}`}</button>\n      <p>{display}</p>\n      <p>{params}</p>\n      <p>{error}</p>\n      <p>{status}</p>\n      <p>{`last called: ${meta.lastCalled}`}</p>\n      <p>{`last params: ${JSON.stringify(meta.lastParams)}`}</p>\n      <p>{`data count: ${meta.dataCount}`}</p>\n      <p>{`error count: ${meta.errorCount}`}</p>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: metadataLifecycle.selector(state),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  meta: metadataLifecycle.meta() as any,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: (params?: IconParams) => dispatch(metadataLifecycle.sync(params)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoizedComponent);\n","import React, { useState } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle } from \"../../naiveasync\";\nimport { AsyncState, OnData } from \"../../naiveasync/actions\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst slowIconToName = (params: IconParams) =>\n  slowResolve({\n    icon: params.icon,\n    name: iconToName[params.icon] || \"NOT FOUND\",\n  });\nconst ondataLifecycle = asyncLifecycle(\"ONDATA_SELECTABLE\", slowIconToName);\n\nconst iconToName = {\n  \"🦅\": \"eagle\",\n  \"🐅\": \"tiger\",\n  \"🦓\": \"zebra\",\n  \"🦒\": \"giraffe\",\n  \"🐘\": \"elephant\",\n  \"🐊\": \"crocodile\",\n};\n\ninterface IconParams {\n  icon: \"🦅\" | \"🐅\" | \"🦓\" | \"🦒\" | \"🐘\" | \"🐊\";\n}\n\ninterface IconResp {\n  icon: string;\n  name: string;\n}\n\ninterface MP {\n  state: AsyncState<IconResp, IconParams>;\n}\n\ninterface DP {\n  select: (params?: IconParams) => void;\n}\n\ntype Props = MP & DP;\n\nconst MemoizedComponent: React.FC<Props> = ({ state, select }) => {\n  const [onDataType, setOnDataType] = useState(\"none\");\n  const assign = (icon: IconParams[\"icon\"]) => () => select({ icon });\n  const display = `selected: ${state.data?.icon || \"...\"} aka ${\n    state.data?.name\n  }`;\n  const status = `status: ${state.status}`;\n  const error = `error: ${state.error}`;\n  const params = `params: ${JSON.stringify(state.params)}`;\n  const assignOnData = (onData?: OnData<IconResp>) => {\n    if (onData) {\n      setOnDataType(onData.name);\n      ondataLifecycle.onData(onData);\n    } else {\n      setOnDataType(\"none\");\n      // ondataLifecycle.onData(null)\n    }\n  };\n  const simple = () => {\n    // eslint-disable-next-line no-console\n    console.log(\"onData received!\");\n  };\n  const cb = (data: IconResp) => {\n    // eslint-disable-next-line no-console\n    console.log(\"fresh data!\", data);\n  };\n  const dispatched = (data: IconResp, dispatch: Dispatch<AnyAction>) => {\n    // eslint-disable-next-line no-console\n    console.log(\"dispatched data!\", data);\n    // eslint-disable-next-line no-console\n    setTimeout(() => dispatch && dispatch(ondataLifecycle.reset()), 2000);\n  };\n\n  return (\n    <div>\n      <button name=\"🦅\" value={\"🦅\"} onClick={assign(\"🦅\")}>{`${\"🦅\"}`}</button>\n      <button name=\"🐅\" value={\"🐅\"} onClick={assign(\"🐅\")}>{`${\"🐅\"}`}</button>\n      <button name=\"🦓\" value={\"🦓\"} onClick={assign(\"🦓\")}>{`${\"🦓\"}`}</button>\n      <button name=\"🦒\" value={\"🦒\"} onClick={assign(\"🦒\")}>{`${\"🦒\"}`}</button>\n      <button name=\"🐘\" value={\"🐘\"} onClick={assign(\"🐘\")}>{`${\"🐘\"}`}</button>\n      <button name=\"🐊\" value={\"🐊\"} onClick={assign(\"🐊\")}>{`${\"🐊\"}`}</button>\n      <p>{`onData: ${onDataType}`}</p>\n      <p>{display}</p>\n      <p>{params}</p>\n      <p>{error}</p>\n      <p>{status}</p>\n      <button name=\"disable onData\" onClick={() => assignOnData()}>\n        disable onData\n      </button>\n      <button name=\"simple onData\" onClick={() => assignOnData(simple)}>\n        simple onData\n      </button>\n      {/* TODO: theres a typing bug here I cant figure out just yet */}\n      <button name=\"callback onData\" onClick={() => assignOnData(cb as never)}>\n        callback onData\n      </button>\n      <button\n        name=\"dispatch onData\"\n        onClick={() => assignOnData(dispatched as never)}\n      >\n        dispatch onData\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: ondataLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: (params?: IconParams) => dispatch(ondataLifecycle.sync(params)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoizedComponent);\n","import React, { useState } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle } from \"../../naiveasync\";\nimport { AsyncState, OnError } from \"../../naiveasync/actions\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst slowIconToName = (params: IconParams) =>\n  slowResolve({\n    icon: params.icon,\n    name: iconToName[params.icon] || \"NOT FOUND\",\n  });\nconst onErrorLifecycle = asyncLifecycle(\n  \"ONERROR_SELECTABLE\",\n  slowIconToName\n).timeout(2000);\n\nconst iconToName = {\n  \"🦅\": \"eagle\",\n  \"🐅\": \"tiger\",\n  \"🦓\": \"zebra\",\n  \"🦒\": \"giraffe\",\n  \"🐘\": \"elephant\",\n  \"🐊\": \"crocodile\",\n};\n\ninterface IconParams {\n  icon: \"🦅\" | \"🐅\" | \"🦓\" | \"🦒\" | \"🐘\" | \"🐊\";\n}\n\ninterface IconResp {\n  icon: string;\n  name: string;\n}\n\ninterface MP {\n  state: AsyncState<IconResp, IconParams>;\n}\n\ninterface DP {\n  select: (params?: IconParams) => void;\n}\n\ntype Props = MP & DP;\n\nconst MemoizedComponent: React.FC<Props> = ({ state, select }) => {\n  const [onErrorType, setonErrorType] = useState(\"none\");\n  const assign = (icon: IconParams[\"icon\"]) => () => select({ icon });\n  const display = `selected: ${state.data?.icon || \"...\"} aka ${\n    state.data?.name\n  }`;\n  const status = `status: ${state.status}`;\n  const error = `error: ${state.error}`;\n  const params = `params: ${JSON.stringify(state.params)}`;\n  const assignonError = (onError?: OnError) => {\n    if (onError) {\n      setonErrorType(onError.name);\n      onErrorLifecycle.onError(onError);\n    } else {\n      setonErrorType(\"none\");\n      // onErrorLifecycle.onError(null)\n    }\n  };\n  const simple = () => {\n    // eslint-disable-next-line no-console\n    console.error(\"onError received!\");\n  };\n  const cb: OnError = (error: string) => {\n    // eslint-disable-next-line no-console\n    console.error(\"an error was thrown\", error);\n  };\n  const dispatched = (error: string, dispatch: Dispatch<AnyAction>) => {\n    // eslint-disable-next-line no-console\n    console.error(\"very bad error!\", error);\n    // eslint-disable-next-line no-console\n    setTimeout(() => dispatch && dispatch(onErrorLifecycle.reset()), 2000);\n  };\n\n  return (\n    <div>\n      <button name=\"🦅\" value={\"🦅\"} onClick={assign(\"🦅\")}>{`${\"🦅\"}`}</button>\n      <button name=\"🐅\" value={\"🐅\"} onClick={assign(\"🐅\")}>{`${\"🐅\"}`}</button>\n      <button name=\"🦓\" value={\"🦓\"} onClick={assign(\"🦓\")}>{`${\"🦓\"}`}</button>\n      <button name=\"🦒\" value={\"🦒\"} onClick={assign(\"🦒\")}>{`${\"🦒\"}`}</button>\n      <button name=\"🐘\" value={\"🐘\"} onClick={assign(\"🐘\")}>{`${\"🐘\"}`}</button>\n      <button name=\"🐊\" value={\"🐊\"} onClick={assign(\"🐊\")}>{`${\"🐊\"}`}</button>\n      <p>{`onError: ${onErrorType}`}</p>\n      <p>{display}</p>\n      <p>{params}</p>\n      <p>{error}</p>\n      <p>{status}</p>\n      <button name=\"disable onError\" onClick={() => assignonError()}>\n        disable onError\n      </button>\n      <button name=\"simple onError\" onClick={() => assignonError(simple)}>\n        simple onError\n      </button>\n      {/* TODO: theres a typing bug here I cant figure out just yet */}\n      <button name=\"callback onError\" onClick={() => assignonError(cb)}>\n        callback onError\n      </button>\n      <button name=\"dispatch onError\" onClick={() => assignonError(dispatched)}>\n        dispatch onError\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: onErrorLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: (params?: IconParams) => dispatch(onErrorLifecycle.sync(params)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoizedComponent);\n","import React, { useEffect, useState } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle, AsyncState } from \"../../naiveasync\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst randomNumberFn = (params: RandomNumberSyncParams) =>\n  slowResolve(Math.floor(Math.random() * 100) * params.multiplier);\nconst randomNumberLifecycle = asyncLifecycle(\n  \"RANDOM_SELECTABLE\",\n  randomNumberFn\n);\n\ninterface RandomNumberSyncParams {\n  multiplier: number;\n}\n\ninterface MP {\n  state: AsyncState<number, RandomNumberSyncParams>;\n}\n\ninterface DP {\n  generate: (params?: RandomNumberSyncParams) => void;\n}\n\ntype Props = MP & DP;\n\nconst RandomNumberSync: React.FC<Props> = ({ state, generate }) => {\n  const val = state.data;\n  const [multiplier, setMultiplier] = useState(1);\n  useEffect(() => {\n    generate({ multiplier });\n  }, [generate, multiplier]);\n  useEffect(() => {\n    generate();\n  }, [val, generate]);\n  const assignMultiplier = (num: number) => () => setMultiplier(num);\n  const display = `multiplier: ${multiplier}x, random number: ${val}`;\n  const status = `status: ${state.status}`;\n  return (\n    <div>\n      <button name=\"0x\" value={0} onClick={assignMultiplier(0)}>\n        0x\n      </button>\n      <button name=\"1x\" value={1} onClick={assignMultiplier(1)}>\n        1x\n      </button>\n      <button name=\"2x\" value={2} onClick={assignMultiplier(2)}>\n        2x\n      </button>\n      <button name=\"3x\" value={3} onClick={assignMultiplier(3)}>\n        3x\n      </button>\n      <button name=\"5x\" value={5} onClick={assignMultiplier(5)}>\n        5x\n      </button>\n      <button name=\"10x\" value={10} onClick={assignMultiplier(10)}>\n        10x\n      </button>\n      <p>{display}</p>\n      <p>{status}</p>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: randomNumberLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  generate: (params?: RandomNumberSyncParams) =>\n    dispatch(randomNumberLifecycle.sync(params)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RandomNumberSync);\n","import React, { useEffect } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle, AsyncState } from \"../../naiveasync\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst randomNumberFn = () => slowResolve(Math.floor(Math.random() * 100));\nconst randomNumberLifecycle = asyncLifecycle(\"RANDOM\", randomNumberFn);\n\ninterface MP {\n  state: AsyncState<number, never>;\n}\n\ninterface DP {\n  generate: () => void;\n}\n\ntype Props = MP & DP;\n\nconst RandomNumberSync: React.FC<Props> = ({ state, generate }) => {\n  const val = state.data;\n  useEffect(() => {\n    generate();\n  }, [val, generate]);\n  const display = `random number: ${val}`;\n  return <p>{display}</p>;\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: randomNumberLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  generate: () => dispatch(randomNumberLifecycle.sync({})),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RandomNumberSync);\n","import React from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle, AsyncState } from \"../../naiveasync\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst slowIconToName = (params: {}) => {\n  // eslint-disable-next-line no-console\n  console.log(\"throttle called!\");\n  return slowResolve({\n    icon: \"\",\n    name: \"THROTTLE\",\n  });\n};\nconst throttleLifecycle = asyncLifecycle(\n  \"throttle_SELECTABLE\",\n  slowIconToName\n).throttle(2000);\n\ninterface IconResp {\n  icon: string;\n  name: string;\n}\n\ninterface MP {\n  state: AsyncState<IconResp, {}>;\n}\n\ninterface DP {\n  select: (params?: {}) => void;\n}\n\ntype Props = MP & DP;\n\nconst MemoizedComponent: React.FC<Props> = ({ state, select }) => {\n  const display = `selected: ${state.data?.icon || \"...\"} (check the logs)`;\n  const status = `status: ${state.status}`;\n  const error = `error: ${state.error}`;\n  const params = `params: ${JSON.stringify(state.params)}`;\n\n  return (\n    <div>\n      <button\n        name=\"🦅\"\n        value={\"🦅\"}\n        onClick={() => select()}\n      >{`select`}</button>\n      <p>{display}</p>\n      <p>{params}</p>\n      <p>{error}</p>\n      <p>{status}</p>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: throttleLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: () => dispatch(throttleLifecycle.sync({})),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoizedComponent);\n","import React, { useEffect } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect, useDispatch } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle, mockDoneAsyncState } from \"../../naiveasync\";\nimport { NaiveAsyncState } from \"../../naiveasync/actions\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst slowIconToName = (params: {}) =>\n  slowResolve({\n    icon: \"\",\n    name: \"DEBOUNCE\",\n  });\nconst assignTestLifecycle = asyncLifecycle(\"ASSIGN_TEST\", slowIconToName);\n\ninterface IconResp {\n  icon: string;\n  name: string;\n}\n\ninterface MP {\n  state: NaiveAsyncState<IconResp, {}>;\n}\n\ninterface DP {\n  select: (params?: {}) => void;\n}\n\ntype Props = MP & DP;\n\nconst AssignedComponent: React.FC<Props> = ({ state, select }) => {\n  const display = `selected: ${state.data?.icon} (${state.data?.name})`;\n  const status = `status: ${state.status}`;\n  const error = `error: ${state.error}`;\n  const params = `params: ${JSON.stringify(state.params)}`;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const icon = \"🦅\";\n    const name = \"assigned!\";\n    dispatch(\n      assignTestLifecycle.assign(mockDoneAsyncState({ icon, name }, {}))\n    );\n  }, [dispatch]);\n\n  return (\n    <div>\n      <i>(this component should appear in an initial \"done\" state)</i>\n      <p>{display}</p>\n      <p>{params}</p>\n      <p>{error}</p>\n      <p>{status}</p>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: assignTestLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: () => dispatch(assignTestLifecycle.sync({})),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AssignedComponent);\n","import React, { useEffect } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect, useDispatch } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport {\n  AsyncLifecycle,\n  asyncLifecycle,\n  AsyncState,\n  mockDoneAsyncState,\n} from \"../../naiveasync\";\n\nconst riskyResolve = <T extends {}>(val: T): Promise<T> =>\n  new Promise((resolve, reject) => {\n    const rand = Math.random();\n    const timeMS = rand * 100;\n    // eslint-disable-next-line no-console\n    console.log(`Chosen random value: ${rand}`);\n\n    setTimeout(() => {\n      if (rand > 0.5) {\n        reject(val);\n      } else {\n        resolve(val);\n      }\n    }, timeMS);\n  });\n\nconst handleErr = (err: string) => {\n  // eslint-disable-next-line no-console\n  console.debug(`retried err: `, err);\n};\nconst retryTestLifecycle: AsyncLifecycle<{}, {}> = asyncLifecycle(\n  \"23_RETRY_TEST\",\n  riskyResolve\n).retries(3, handleErr);\n\ninterface MP {\n  state: AsyncState<{}, {}>;\n}\n\ninterface DP {\n  select: (params?: {}) => void;\n}\n\ntype Props = MP & DP;\n\nconst SubscribeComponent: React.FC<Props> = ({ state, select }) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const icon = \"🦅\";\n    const name = \"assigned!\";\n    dispatch(retryTestLifecycle.assign(mockDoneAsyncState({ icon, name }, {})));\n  }, [dispatch]);\n  const sync = (params: {}) => dispatch(retryTestLifecycle.sync(params));\n  const call = (params: {}) => dispatch(retryTestLifecycle.call(params));\n  const reset = () => dispatch(retryTestLifecycle.reset());\n\n  return (\n    <div>\n      <p>status: {JSON.stringify(state.status)}</p>\n      <p>params: {JSON.stringify(state.params)}</p>\n      <p>error: {JSON.stringify(state.error)}</p>\n      <p>data: {JSON.stringify(state.data)}</p>\n      <button onClick={() => call({})}>call</button>\n      <button style={{ backgroundColor: \"cyan\" }} onClick={() => sync({})}>\n        sync\n      </button>\n      <button style={{ backgroundColor: \"yellow\" }} onClick={() => reset()}>\n        reset\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: retryTestLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: () => dispatch(retryTestLifecycle.sync({})),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SubscribeComponent);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect, useDispatch } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle, mockDoneAsyncState } from \"../../naiveasync\";\nimport { NaiveAsyncState } from \"../../naiveasync/actions\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst slowIconToName = (params: {}) =>\n  slowResolve({\n    icon: \"\",\n    name: `${Math.random()}`,\n  });\nconst subscriptionTestLifecycle = asyncLifecycle(\n  \"22_SUBSCRIBE_TEST\",\n  slowIconToName\n);\n\ninterface IconResp {\n  icon: string;\n  name: string;\n}\n\ninterface MP {\n  state: NaiveAsyncState<IconResp, {}>;\n}\n\ninterface DP {\n  select: (params?: {}) => void;\n}\n\ntype Props = MP & DP;\n\nconst SubscribeComponent: React.FC<Props> = ({ state, select }) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const icon = \"🦅\";\n    const name = \"assigned!\";\n    dispatch(\n      subscriptionTestLifecycle.assign(mockDoneAsyncState({ icon, name }, {}))\n    );\n  }, [dispatch]);\n  const sync = (params: any) =>\n    dispatch(subscriptionTestLifecycle.sync(params));\n  const call = (params: any) =>\n    dispatch(subscriptionTestLifecycle.call(params));\n  const reset = () => dispatch(subscriptionTestLifecycle.reset());\n  const subscribe = (params: number) =>\n    dispatch(subscriptionTestLifecycle.subscribe(params));\n\n  return (\n    <div>\n      <p>status: {JSON.stringify(state.status)}</p>\n      <p>params: {JSON.stringify(state.params)}</p>\n      <p>error: {JSON.stringify(state.error)}</p>\n      <p>data: {JSON.stringify(state.data)}</p>\n      <button onClick={() => call({})}>call</button>\n      <button style={{ backgroundColor: \"cyan\" }} onClick={() => sync({})}>\n        sync\n      </button>\n      <button style={{ backgroundColor: \"yellow\" }} onClick={() => reset()}>\n        reset\n      </button>\n      <p>subscriptions</p>\n      <button\n        style={{ backgroundColor: \"gray\" }}\n        onClick={() => subscribe(2000)}\n      >\n        subscribe 2sec\n      </button>\n      <button\n        style={{ backgroundColor: \"gray\" }}\n        onClick={() => subscribe(6000)}\n      >\n        subscribe 6sec\n      </button>\n      <button\n        style={{ backgroundColor: \"gray\" }}\n        onClick={() => subscribe(10000)}\n      >\n        subscribe 10sec\n      </button>\n      <button\n        style={{ backgroundColor: \"light-gray\" }}\n        onClick={() => subscribe(0)}\n      >\n        clear subscribe\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: any): MP => ({\n  state: subscriptionTestLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: () => dispatch(subscriptionTestLifecycle.sync({})),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SubscribeComponent);\n","import React, { ChangeEvent, useState } from \"react\";\n// tslint:disable-next-line: no-implicit-dependencies\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { asyncLifecycle, AsyncState } from \"../../naiveasync\";\nimport { slowResolve } from \"../../utils/promise\";\n\nconst slowIconToName = (params: IconParams) =>\n  slowResolve({\n    icon: params.icon,\n    name: iconToName[params.icon] || \"NOT FOUND\",\n  });\nconst timeoutLifecycle = asyncLifecycle(\"TIMEOUT_SELECTABLE\", slowIconToName);\n\nconst iconToName = {\n  \"🦅\": \"eagle\",\n  \"🐅\": \"tiger\",\n  \"🦓\": \"zebra\",\n  \"🦒\": \"giraffe\",\n  \"🐘\": \"elephant\",\n  \"🐊\": \"crocodile\",\n};\n\ninterface IconParams {\n  icon: \"🦅\" | \"🐅\" | \"🦓\" | \"🦒\" | \"🐘\" | \"🐊\";\n}\n\ninterface IconResp {\n  icon: string;\n  name: string;\n}\n\ninterface MP {\n  state: AsyncState<IconResp, IconParams>;\n}\n\ninterface DP {\n  select: (params?: IconParams) => void;\n}\n\ntype Props = MP & DP;\n\nconst MemoizedComponent: React.FC<Props> = ({ state, select }) => {\n  const [timeout, setTheTimeout] = useState(0);\n  const assign = (icon: IconParams[\"icon\"]) => () => select({ icon });\n  const display = `selected: ${state.data?.icon || \"...\"} aka ${\n    state.data?.name\n  }`;\n  const status = `status: ${state.status}`;\n  const error = `error: ${state.error}`;\n  const params = `params: ${JSON.stringify(state.params)}`;\n  const changeTimeout = (e: ChangeEvent) => {\n    const element = e.currentTarget as HTMLInputElement;\n    const value = parseInt(element.value, 10);\n    if (isNaN(value)) {\n      return;\n    }\n    setTheTimeout(value);\n    timeoutLifecycle.timeout(value);\n  };\n  return (\n    <div>\n      <button name=\"🦅\" value={\"🦅\"} onClick={assign(\"🦅\")}>{`${\"🦅\"}`}</button>\n      <button name=\"🐅\" value={\"🐅\"} onClick={assign(\"🐅\")}>{`${\"🐅\"}`}</button>\n      <button name=\"🦓\" value={\"🦓\"} onClick={assign(\"🦓\")}>{`${\"🦓\"}`}</button>\n      <button name=\"🦒\" value={\"🦒\"} onClick={assign(\"🦒\")}>{`${\"🦒\"}`}</button>\n      <button name=\"🐘\" value={\"🐘\"} onClick={assign(\"🐘\")}>{`${\"🐘\"}`}</button>\n      <button name=\"🐊\" value={\"🐊\"} onClick={assign(\"🐊\")}>{`${\"🐊\"}`}</button>\n      <p>{display}</p>\n      <p>{params}</p>\n      <p>{error}</p>\n      <p>{status}</p>\n      <input\n        type=\"number\"\n        id=\"timeout\"\n        name=\"timeout\"\n        min=\"1\"\n        value={timeout}\n        onChange={changeTimeout}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: never): MP => ({\n  state: timeoutLifecycle.selector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DP => ({\n  select: (params?: IconParams) => dispatch(timeoutLifecycle.sync(params)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoizedComponent);\n","/** *\n * Naiveasync Tests\n * MIT License\n * Made with 💙 by @untra\n * ---\n */\nimport React from \"react\";\n/* eslint-disable prefer-promise-reject-errors */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Provider } from \"react-redux\";\nimport * as packagejson from \"../../package.json\";\nimport { AsyncState } from \"../naiveasync/actions\";\nimport { asyncLifecycle, NaiveAsync } from \"../naiveasync/index\";\nimport { Async } from \"../naiveasync/naiveasync\";\nimport { createConnectedStore } from \"../utils/store\";\nimport DebounceTest from \"./components/debounceTest\";\nimport MemoizedSync from \"./components/memoized\";\nimport MetadataTest from \"./components/metadataTest\";\nimport OnDataSync from \"./components/onData\";\nimport OnErrorSync from \"./components/onError\";\nimport RandomNumberSelectableSync from \"./components/RandomNumberSelectableSync\";\nimport RandomNumberSync from \"./components/RandomNumberSync\";\nimport ThrottleTest from \"./components/throttleTest\";\nimport AssignTest from \"./components/assignTest\";\nimport RetryTest from \"./components/retryTest\";\nimport SubscribeTest from \"./components/subscribeTest\";\nimport TimeoutSync from \"./components/timeout\";\nimport { mockResolve, slowReject } from \"../utils/promise\";\n\nconst emojiView = (state: AsyncState<any, {}>) => (\n  <p>\n    {state.status === \"inflight\"\n      ? \"💬\"\n      : state.error\n      ? \"💥\"\n      : state.data\n      ? \"✔️\"\n      : \"❌\"}{\" \"}\n    {`${state.data}`} {`${state.status}`} {`${state.error}`}{\" \"}\n  </p>\n);\n\n// eslint-disable-next-line\nconst callableView = (state: AsyncState<any, {}>, call: ({}) => any) => (\n  <button onClick={call}>\n    {state.status === \"inflight\"\n      ? \"💬\"\n      : state.error\n      ? \"💥\"\n      : state.data\n      ? \"✔️\"\n      : \"❌\"}{\" \"}\n    {`${state.status}`}{\" \"}\n  </button>\n);\n\nconst slowResolve = <T extends any>(val: T): Promise<T> =>\n  new Promise((resolve) => {\n    const timeMS = Math.random() * 4000;\n    setTimeout(() => resolve(val), timeMS);\n  });\n\nconst autoParamsOp = (params: {}) =>\n  Promise.resolve(`✅ with params ${JSON.stringify(params)}`);\n\nconst autoResolve = (params: {}) => slowResolve(\"✅\");\n\n// Hi friend 👋 thanks for reading my naiveasync tests!\n// maybe you're on this github page?\n\nconst thisGithubPage =\n  \"https://github.com/untra/naiveasync/blob/master/src/routes/test.tsx\";\n\n// If you are, then I want to know you are a talented and skilled engineer,\n// and it would certainly be a pleasure to shake your hand one day,\n// and tell you personally _just how cool you are_\n\n// While you're here you may also want to check out that cypress page:\nconst thatCypressPage = \"https://dashboard.cypress.io/#/projects/wrytfx/runs\";\n\nconst namedFunction = function namedFunction() {\n  return slowResolve(true);\n};\n\nconst unreliableTime = 2000;\n\nconst unreliableAsyncOperation = (): Promise<{ value: number }> =>\n  new Promise((resolve, reject) => {\n    const r = Math.random();\n    const time = r * unreliableTime;\n\n    setTimeout(() => {\n      if (r < 0.99) {\n        resolve({ value: r });\n      }\n      reject(new Error(\"an error was thrown\"));\n    }, time);\n  });\n\nconst lifeCycleInput = asyncLifecycle(\"17_LIFECYCLE_INPUT\", autoParamsOp);\n\nconst asyncInputLifecycle = asyncLifecycle(\n  \"19_ASYNC_OPERATION\",\n  unreliableAsyncOperation\n);\n\nconst subscribeLifecycle = asyncLifecycle(\n  \"21_SUBSCRIBE_OPERATION\",\n  unreliableAsyncOperation\n);\n\nconst store = createConnectedStore();\n\nexport default class Test extends React.Component {\n  public render() {\n    return (\n      <Provider store={store}>\n        <div className=\"wrapper\">\n          <h1>\n            <span role=\"img\" aria-label=\"Bento\">\n              🔁\n            </span>{\" \"}\n            NaiveAsync\n          </h1>\n          <h2>Cypress Tests and demonstration</h2>\n          <h3>\n            View this page and tests at <a href={thisGithubPage}>Github.com</a>\n          </h3>\n          <h3>\n            View the test results at <a href={thatCypressPage}>Cypress.io</a>\n          </h3>\n          <h4>version {packagejson.version}</h4>\n          <p>\n            This page is a demonstration of the NaiveTable component used in a\n            variety of ways:\n          </p>\n          <ul>\n            <li>\n              It is the selection and input to a variety of cypress tests.\n            </li>\n            <li>\n              This is also a demonstration of the power of react-hooks, a\n              functional and clean approach to writing react components.\n            </li>\n            <li>\n              View the chrome console to see statistics and reports of how the\n              examples render. (coming soon)\n            </li>\n          </ul>\n          <h4>\n            #1 It should be invoked automatically when autoParams are\n            specified...\n          </h4>\n          <NaiveAsync id=\"NA1\" operation={autoParamsOp} autoParams={{}}>\n            {(state: any) => (\n              <div>\n                <p>status: {JSON.stringify(state.status)}</p>\n                <p>params: {JSON.stringify(state.params)}</p>\n                <p>error: {JSON.stringify(state.error)}</p>\n                <p>data: {JSON.stringify(state.data)}</p>\n              </div>\n            )}\n          </NaiveAsync>\n\n          <h4>#2 It can be invoked when the call cb is invoked</h4>\n          <NaiveAsync id=\"NA2\" operation={autoParamsOp}>\n            {(state, call) => (\n              <div>\n                <p>status: {JSON.stringify(state.status)}</p>\n                <p>params: {JSON.stringify(state.params)}</p>\n                <p>error: {JSON.stringify(state.error)}</p>\n                <p>data: {JSON.stringify(state.data)}</p>\n                <button onClick={() => call({})}>call</button>\n              </div>\n            )}\n          </NaiveAsync>\n\n          <h4>#3 Multiple autoParamed operations should execute</h4>\n          <NaiveAsync id=\"NA3a\" operation={autoResolve} autoParams={{}}>\n            {(state: any) => (\n              <div>\n                <p>{state.data || \"💬\"}</p>\n              </div>\n            )}\n          </NaiveAsync>\n\n          <NaiveAsync id=\"NA3b\" operation={autoResolve} autoParams={{}}>\n            {(state: any) => (\n              <div>\n                <p>{state.data || \"💬\"}</p>\n              </div>\n            )}\n          </NaiveAsync>\n\n          <NaiveAsync id=\"NA3c\" operation={autoResolve} autoParams={{}}>\n            {(state: any) => (\n              <div>\n                <p>{state.data || \"💬\"}</p>\n              </div>\n            )}\n          </NaiveAsync>\n\n          <h4>#4 a circus of promises</h4>\n          <NaiveAsync\n            id=\"NA4a\"\n            operation={() => Promise.resolve(true)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA4b\"\n            operation={() => Promise.resolve(false)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA4c\"\n            operation={() => Promise.reject(\"boom\")}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA4d\"\n            operation={() => Promise.reject(new Error(\"kaboom!\"))}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA4e\"\n            operation={() => slowResolve(true)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA4f\"\n            operation={() => slowResolve(false)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA4g\"\n            operation={() =>\n              slowReject(new Error(\"slow boom\")) as Promise<string>\n            }\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA4h\"\n            operation={() =>\n              slowReject(new Error(\"slow kaboom!\")) as Promise<boolean>\n            }\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n\n          <h4>#5 callable promises</h4>\n          <NaiveAsync id=\"NA5a\" operation={() => Promise.resolve(true)}>\n            {callableView}\n          </NaiveAsync>\n          <NaiveAsync id=\"NA5b\" operation={() => slowResolve(true)}>\n            {callableView}\n          </NaiveAsync>\n          <NaiveAsync id=\"NA5c\" operation={() => slowResolve(true)}>\n            {callableView}\n          </NaiveAsync>\n\n          <h4>#6 very small timeouts</h4>\n          <NaiveAsync\n            id=\"NA6a\"\n            operation={() => mockResolve(true, 1)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA6b\"\n            operation={() => mockResolve(true, 2)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA6c\"\n            operation={() => mockResolve(true, 3)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA6d\"\n            operation={() => mockResolve(true, 4)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA6e\"\n            operation={() => mockResolve(true, 5)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA6f\"\n            operation={() => mockResolve(true, 6)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA6g\"\n            operation={() => mockResolve(true, 7)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n          <NaiveAsync\n            id=\"NA6h\"\n            operation={() => mockResolve(true, 8)}\n            autoParams={{}}\n          >\n            {emojiView}\n          </NaiveAsync>\n\n          <h4>#7 shared id experiment</h4>\n          <NaiveAsync id=\"NA7\" operation={namedFunction}>\n            {callableView}\n          </NaiveAsync>\n          <NaiveAsync id=\"NA7\" operation={namedFunction}>\n            {callableView}\n          </NaiveAsync>\n          <NaiveAsync id=\"NA7\" operation={namedFunction}>\n            {callableView}\n          </NaiveAsync>\n\n          <h4>#8 lifecycle sync</h4>\n          <RandomNumberSync />\n\n          <h4>#9 lifecycle sync retains last passed params</h4>\n          <RandomNumberSelectableSync />\n\n          <h4>#10 test memoized</h4>\n          <MemoizedSync />\n\n          <h4>#11 test timeout</h4>\n          <TimeoutSync />\n\n          <h4>#12 test onData</h4>\n          <OnDataSync />\n\n          <h4>#13 test onError</h4>\n          <OnErrorSync />\n\n          <h4>#14 test meta</h4>\n          <MetadataTest />\n\n          <h4>#15 throttle</h4>\n          <ThrottleTest />\n\n          <h4>#16 debounce</h4>\n          <DebounceTest />\n\n          <h4>#17 naiveasync with lifecycle input</h4>\n          <NaiveAsync operation={lifeCycleInput.operation} id=\"TEST_18\">\n            {(state, call) => (\n              <div>\n                <p>status: {JSON.stringify(state.status)}</p>\n                <p>params: {JSON.stringify(state.params)}</p>\n                <p>error: {JSON.stringify(state.error)}</p>\n                <p>data: {JSON.stringify(state.data)}</p>\n                <button onClick={() => call({})}>call</button>\n              </div>\n            )}\n          </NaiveAsync>\n\n          <h4>#18 Async tag with a managed lifecycle</h4>\n          <Async lifecycle={asyncInputLifecycle}>\n            {({ state, call }) => (\n              <div>\n                <p>status: {JSON.stringify(state.status)}</p>\n                <p>params: {JSON.stringify(state.params)}</p>\n                <p>error: {JSON.stringify(state.error)}</p>\n                <p>data: {JSON.stringify(state.data)}</p>\n                <button onClick={() => call({})}>call</button>\n              </div>\n            )}\n          </Async>\n\n          <h4>#19 reusing Async tag with the same lifecycle, more buttons</h4>\n          <Async lifecycle={asyncInputLifecycle}>\n            {({ state, call, reset, sync }) => (\n              <div>\n                <p>status: {JSON.stringify(state.status)}</p>\n                <p>params: {JSON.stringify(state.params)}</p>\n                <p>error: {JSON.stringify(state.error)}</p>\n                <p>data: {JSON.stringify(state.data)}</p>\n                <button onClick={() => call({})}>call</button>\n                <button\n                  style={{ backgroundColor: \"cyan\" }}\n                  onClick={() => sync({})}\n                >\n                  sync\n                </button>\n                <button\n                  style={{ backgroundColor: \"yellow\" }}\n                  onClick={() => reset()}\n                >\n                  reset\n                </button>\n              </div>\n            )}\n          </Async>\n\n          <h4>#20 assignTest</h4>\n          <AssignTest />\n\n          <h4>#21 subscribe with Async Test</h4>\n          <Async lifecycle={subscribeLifecycle}>\n            {({ state, call, reset, sync, subscribe }) => (\n              <div>\n                <p>status: {JSON.stringify(state.status)}</p>\n                <p>params: {JSON.stringify(state.params)}</p>\n                <p>error: {JSON.stringify(state.error)}</p>\n                <p>data: {JSON.stringify(state.data)}</p>\n                <button onClick={() => call({})}>call</button>\n                <button\n                  style={{ backgroundColor: \"cyan\" }}\n                  onClick={() => sync({})}\n                >\n                  sync\n                </button>\n                <button\n                  style={{ backgroundColor: \"yellow\" }}\n                  onClick={() => reset()}\n                >\n                  reset\n                </button>\n                <p>subscriptions</p>\n                <button\n                  style={{ backgroundColor: \"gray\" }}\n                  onClick={() => subscribe(2000)}\n                >\n                  subscribe 2sec\n                </button>\n                <button\n                  style={{ backgroundColor: \"gray\" }}\n                  onClick={() => subscribe(6000)}\n                >\n                  subscribe 6sec\n                </button>\n                <button\n                  style={{ backgroundColor: \"gray\" }}\n                  onClick={() => subscribe(10000)}\n                >\n                  subscribe 10sec\n                </button>\n                <button\n                  style={{ backgroundColor: \"light-gray\" }}\n                  onClick={() => subscribe(0)}\n                >\n                  clear subscribe\n                </button>\n              </div>\n            )}\n          </Async>\n\n          <h4>#22 subscribe test</h4>\n          <SubscribeTest />\n\n          <h4>#23 retry test</h4>\n          <RetryTest />\n        </div>\n      </Provider>\n    );\n  }\n}\n","/* tslint:disable */\nimport ReactDOM from \"react-dom\";\nimport routes from \"./routes\";\n// the naiveAsyncReducer maintains the redux state\n// the naiveAsyncMiddleware employs rxjs observables to fulfill promises\n// const store = createStore(naiveAsyncReducer, applyMiddleware(naiveAsyncMiddleware))\n\n// supply the created store into your redux provider\n// use the <NaiveAsync>(state, call) => react component and callback\n// to render your asynchronous state with ease and splendor\n\nReactDOM.render(routes(), document.getElementById(\"root\"));\n","// tslint:disable-next-line: no-implicit-dependencies\nimport React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport home from \"./home\";\nimport test from \"./tests\";\n\n// NOTE: see https://medium.com/@Dragonza/react-router-problem-with-gh-pages-c93a5e243819\n// for explanation of BrowserRouter hook-up\n\nexport default () => (\n  <HashRouter basename=\"/\">\n    <Switch>\n      <Route path=\"/test\" component={test} />\n      <Route exact path=\"/\" component={home} />\n      <Route\n        component={() => (\n          <div className=\"wrapper\">\n            <h1>{\"404 Not found\"}</h1>{\" \"}\n          </div>\n        )}\n      />\n    </Switch>\n  </HashRouter>\n);\n"],"sourceRoot":""}